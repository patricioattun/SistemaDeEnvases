
package Presentacion.Licencias;

import Dominio.Codigo;
import Dominio.Fallecimiento;
import Dominio.Feriado;
import Dominio.Funcionario;
import Dominio.Horario;
import Dominio.Licencia;
import Logica.LogCodigo;
import Logica.LogFuncionario;
import Presentacion.frmPrin;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;


public class InternalMovLicencia extends javax.swing.JInternalFrame {
    private LogFuncionario log;
    private LogCodigo logC;
    private frmPrin frm;
    private Integer real=0;
    private ArrayList<Feriado> listaFeriados;
    private ArrayList<Fallecimiento> listaFalle;
    private ArrayList<Licencia> lista=null;
    private ArrayList<Licencia> listaPasado=null;
    private Licencia l=null;
    private Fallecimiento fa=null;
    private Funcionario f=null;
   private static InternalMovLicencia instancia=null;
   
    public InternalMovLicencia() throws ClassNotFoundException, SQLException {
        initComponents();
        this.txtSaldo.setEditable(false);
        this.btnAceptar.setEnabled(false);
        this.comboAño.setEnabled(false);
        this.txtFechaFIn.setEnabled(false);
        this.txtFechaIni.setEnabled(false);
        this.btnCalc.setEnabled(false);
        this.txtdias.setEnabled(false);
        log=new LogFuncionario();
        logC=new LogCodigo();
        this.listaFeriados=this.log.listarTodosFeriados();
        this.lblGen.setVisible(false);
        this.comboAño.setVisible(false);
        this.cargaComboTipo();
        this.comboTipo.setEnabled(false);
    }
    
    public static InternalMovLicencia instancia() throws ClassNotFoundException, SQLException
   {    
         if (instancia== null)
         {
            instancia = new InternalMovLicencia();
         }
         return instancia;
      
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCodFunc = new org.edisoncor.gui.textField.TextFieldRound();
        btnBuscar = new org.edisoncor.gui.button.ButtonIcon();
        comboAño = new javax.swing.JComboBox();
        lblGen = new javax.swing.JLabel();
        txtSaldo = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel4 = new javax.swing.JLabel();
        txtdias = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel5 = new javax.swing.JLabel();
        txtFechaIni = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtFechaFIn = new com.toedter.calendar.JDateChooser();
        btnAceptar = new org.edisoncor.gui.button.ButtonIcon();
        lblNombres = new javax.swing.JLabel();
        lblMsg = new javax.swing.JLabel();
        lblReal = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox();
        btnCalc = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.FlowLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Movimiento Licencias", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ebrima", 1, 18))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel2.setText("Cod.Funcionario");

        txtCodFunc.setBackground(new java.awt.Color(102, 153, 255));
        txtCodFunc.setForeground(new java.awt.Color(255, 255, 255));
        txtCodFunc.setCaretColor(new java.awt.Color(255, 255, 255));
        txtCodFunc.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtCodFunc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodFuncKeyTyped(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(102, 153, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnBuscar.setText("buttonIcon1");
        btnBuscar.setToolTipText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        comboAño.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboAñoItemStateChanged(evt);
            }
        });
        comboAño.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                comboAñoFocusLost(evt);
            }
        });

        lblGen.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        lblGen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblGen.setText("Año Licencia Generada");

        txtSaldo.setBackground(new java.awt.Color(102, 153, 255));
        txtSaldo.setForeground(new java.awt.Color(255, 255, 255));
        txtSaldo.setCaretColor(new java.awt.Color(255, 255, 255));
        txtSaldo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtSaldo.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtSaldo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSaldoKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel4.setText("Saldo");

        txtdias.setBackground(new java.awt.Color(102, 153, 255));
        txtdias.setForeground(new java.awt.Color(255, 255, 255));
        txtdias.setCaretColor(new java.awt.Color(255, 255, 255));
        txtdias.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtdias.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtdiasFocusLost(evt);
            }
        });
        txtdias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtdiasKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel5.setText("Dias a tomar");

        txtFechaIni.setDateFormatString("dd/MM/yyyy");
        txtFechaIni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFechaIniKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel6.setText("Fecha Inicio");

        jLabel7.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel7.setText("Fecha Fin");

        txtFechaFIn.setDateFormatString("dd/MM/yyyy");
        txtFechaFIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFechaFInKeyTyped(evt);
            }
        });

        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Ok.png"))); // NOI18N
        btnAceptar.setText("buttonIcon1");
        btnAceptar.setToolTipText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        lblNombres.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNombres.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblMsg.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblReal.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblReal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel8.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel8.setText("Tipo");

        comboTipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTipoItemStateChanged(evt);
            }
        });

        btnCalc.setBackground(new java.awt.Color(102, 153, 255));
        btnCalc.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        btnCalc.setText("Calcular");
        btnCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblReal, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(69, 69, 69)
                                .addComponent(txtFechaFIn, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(52, 52, 52)
                                    .addComponent(txtFechaIni, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(43, 43, 43)
                                        .addComponent(txtdias, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(101, 101, 101)
                                            .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(lblGen)
                                                .addGap(35, 35, 35)
                                                .addComponent(comboAño, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel8)
                                                    .addGap(110, 110, 110)
                                                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel2)
                                                    .addGap(25, 25, 25)
                                                    .addComponent(txtCodFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(20, 20, 20)
                                                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(lblNombres, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(btnCalc, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(txtCodFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGen)
                    .addComponent(comboAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel4))
                    .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel5))
                    .addComponent(txtdias, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel6))
                    .addComponent(txtFechaIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(btnCalc)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel7))
                    .addComponent(txtFechaFIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(lblReal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodFuncKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodFuncKeyTyped
        this.limpiar();
        this.lblMsg.setText("");
        this.lblNombres.setText("");
        this.btnAceptar.setEnabled(false);
        this.btnCalc.setEnabled(false);
        this.txtdias.setEnabled(false);
        this.comboAño.setEnabled(false);
        this.txtFechaFIn.setEnabled(false);
        this.txtFechaIni.setEnabled(false);
        this.txtFechaFIn.setDate(null);
        this.txtFechaIni.setDate(null);
        this.comboTipo.setEnabled(false);
        //        this.comboTipo.setSelectedIndex(0);
        char c=evt.getKeyChar();
        if(!Character.isDigit(c)) {
            evt.consume();
        }
        if(evt.getKeyChar()==10){
            this.btnBuscar.doClick();
            this.txtdias.requestFocus();
        }
        this.txtCodFunc.requestFocus();
    }//GEN-LAST:event_txtCodFuncKeyTyped

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        this.limpiar();
        String codFunc=this.txtCodFunc.getText();
        try {
            if(!codFunc.equals("")){
                this.txtdias.requestFocus();
                f=this.log.funcParcial(codFunc);
                lista=log.cargaComboLicencia(codFunc);
                listaPasado=log.cargaComboLicenciaPasado(codFunc);
                this.comboAño.removeAllItems();
                this.comboTipo.removeAllItems();
                this.cargaComboTipo();
                if(!lista.isEmpty()){
                    this.comboAño.removeAllItems();
                    for(int i=0;i<lista.size();i++){
                        this.comboAño.addItem(lista.get(i));
                        //this.comboAño.setSelectedIndex(1);
                    }
                    this.lblMsg.setText("");
                    this.lblNombres.setText(f.getNomCompleto());
                    if(!lista.isEmpty()){
                        this.txtSaldo.setText(lista.get(0).getSaldo().toString());
                    }
                    else{
                        this.txtSaldo.setText("");
                    }
                    this.btnAceptar.setEnabled(true);
                    this.txtdias.setEnabled(true);
                    this.comboAño.setEnabled(true);
                    this.txtFechaFIn.setEnabled(true);
                    this.txtFechaIni.setEnabled(true);
                    this.btnCalc.setEnabled(true);
                    this.comboTipo.setEnabled(true);
                    this.comboTipo.setSelectedIndex(0);
                    this.txtdias.requestFocus();

                }
                else{
                    if(f==null){
                        this.lblMsg.setText("No existe el Funcionario");
                        this.comboAño.setEnabled(false);
                        this.btnAceptar.setEnabled(false);
                        this.comboTipo.setEnabled(false);
                        this.btnCalc.setEnabled(false);
                        this.comboTipo.setSelectedIndex(0);
                    }
                    else{
                        this.comboTipo.removeItemAt(0);
                        this.lblGen.setVisible(false);
                        this.comboAño.setVisible(false);
                        this.lblNombres.setText(f.getNomCompleto());
                        this.btnAceptar.setEnabled(true);
                        this.btnCalc.setEnabled(true);
                        this.comboAño.setEnabled(true);
                        this.txtFechaFIn.setEnabled(true);
                        this.txtFechaIni.setEnabled(true);
                        this.comboTipo.setEnabled(true);
                        this.comboTipo.setSelectedIndex(1);
                        this.txtdias.setEnabled(true);
                        this.txtdias.requestFocus();
                    }
                }
            }
            else{
                this.lblMsg.setText("Ingrese un número de funcionario");
                this.comboTipo.setEnabled(false);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void comboAñoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboAñoItemStateChanged
        this.txtdias.requestFocus();
        this.txtSaldo.setText("");
        Codigo c=(Codigo) this.comboTipo.getSelectedItem();
        if(c.getCod().equals(10)){
            Licencia l=(Licencia) this.comboAño.getSelectedItem();
            if(l!=null){
                this.txtSaldo.setText(l.getSaldo().toString());
            }
        }
        else{
            if(c.getCod().equals(16)){
                Fallecimiento f=(Fallecimiento) this.comboAño.getSelectedItem();
                if(f!=null){
                    this.txtSaldo.setText(f.getValor().toString());
                }
            }
        }
    }//GEN-LAST:event_comboAñoItemStateChanged

    private void comboAñoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comboAñoFocusLost

    }//GEN-LAST:event_comboAñoFocusLost

    private void txtSaldoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSaldoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSaldoKeyTyped

    private void txtdiasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtdiasFocusLost
        Integer saldo=null;
        if(!this.txtSaldo.getText().equals("")){
            saldo=Integer.valueOf(this.txtSaldo.getText());
        }
        if(saldo!=null){
            if(!this.txtdias.getText().equals("")){
                Integer dias=Integer.valueOf(this.txtdias.getText());
                if(saldo<dias){
                    this.lblMsg.setText("Los días a tomar no pueden ser mayor al saldo");
                }
                else{
                    this.lblMsg.setText("");
                }
            }
        }
    }//GEN-LAST:event_txtdiasFocusLost

    private void txtdiasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdiasKeyTyped
        char c=evt.getKeyChar();
        if(!Character.isDigit(c)) {
            evt.consume();
        }
        if(evt.getKeyChar()==10){
            this.txtFechaIni.requestFocus();
        }
    }//GEN-LAST:event_txtdiasKeyTyped

    private void txtFechaIniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaIniKeyTyped
        if(evt.getKeyChar()==10){
            this.txtFechaFIn.requestFocus();
        }
    }//GEN-LAST:event_txtFechaIniKeyTyped

    private void txtFechaFInKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaFInKeyTyped
        if(evt.getKeyChar()==10){
            this.btnAceptar.doClick();
        }
    }//GEN-LAST:event_txtFechaFInKeyTyped

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        Date ini=this.txtFechaIni.getDate();
        Date fin=this.txtFechaFIn.getDate();
        Codigo c=(Codigo) this.comboTipo.getSelectedItem();
        l=new Licencia();
        fa=new Fallecimiento();

        if(!this.txtdias.getText().equals("")){

            try {
                l.setFuncionario(this.log.buscarFuncionario(this.txtCodFunc.getText()));
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(this.comboAño.getItemCount()>0){
                if(c.getCod().equals(10)){
                    l=(Licencia) this.comboAño.getSelectedItem();
                }
                else{
                    if(c.getCod().equals(16)){
                        fa=(Fallecimiento) this.comboAño.getSelectedItem();
                    }
                }
            }
            else{
                Date hoy=new Date();
                l.setAño(Integer.valueOf(this.obtenerAño(hoy)));
                //   l.setFuncionario(this.log.buscarFuncionario(this.txtCodFunc.getText()));
            }

            if(this.chequeaDiasATomar(c,this.txtdias.getText())){
                Integer diasTomar=Integer.valueOf(this.txtdias.getText());
                if(ini!=null && fin!=null&&diasTomar>0&&l!=null &&!this.txtSaldo.getText().equals("")){
                    if(ini.after(fin)){
                        this.lblMsg.setText("La fecha de inicio no puede ser mayor a la de fin");
                    }
                    else{
                        if(this.evaluaFechas(ini, fin, this.txtSaldo.getText(),l.getFuncionario().getHorarios())){
                            Integer dom=this.obtieneDomingoySabado(ini, fin,l.getFuncionario().getHorarios());
                            Integer fer=this.compararFechas(ini, fin).size();
                            this.lblReal.setText("Dias tomados en cuenta "+real.toString());
                            this.lblMsg.setText("Considere que en este rango hay "+dom+" días que no cuentan, y "+fer+" feriados");

                            if(diasTomar==real){
                                this.lblMsg.setText("");
                                Integer saldo=Integer.valueOf(this.txtSaldo.getText());
                                Date hoy=new Date();
                                Integer añoSacar;
                                if(c.getCod().equals(10)){
                                    añoSacar=l.getAño()+1;
                                }
                                if(c.getCod().equals(1000)){
                                   Licencia h=(Licencia)this.comboAño.getSelectedItem();
                                   añoSacar=h.getAño()+1;
                                }
                                else{
                                    añoSacar=Integer.valueOf(this.obtenerAño(hoy));
                                }
                                Funcionario Func=l.getFuncionario();
                                Integer saldoPos=saldo-diasTomar;
                                try {
                                    if(this.log.insertarMovLicencia(ini,fin,saldo,diasTomar,hoy,añoSacar,Func,saldoPos,c.getCod())){
                                        this.lblNombres.setText("");
                                        this.btnAceptar.setEnabled(false);
                                        this.comboAño.setEnabled(false);
                                        this.btnCalc.setEnabled(false);
                                        this.txtFechaFIn.setEnabled(false);
                                        this.txtFechaIni.setEnabled(false);
                                        this.txtFechaFIn.setDate(null);
                                        this.txtFechaIni.setDate(null);
                                        this.lblReal.setText("");
                                        this.txtCodFunc.setText("");
                                        this.txtdias.setText("");
                                        this.txtdias.setEnabled(false);
                                        this.txtSaldo.setText("");
                                        this.comboAño.removeAllItems();
                                        this.comboTipo.removeAllItems();
                                        this.lblMsg.setText("Se ha ingresado el movimiento correctamente");
                                        this.txtCodFunc.requestFocus();

                                    }
                                } catch (ClassNotFoundException ex) {
                                    Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (SQLException ex) {
                                    Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            else{
                                this.lblMsg.setText("Verifique los días a tomar");
                            }
                        }
                        else{
                            Integer dom=this.obtieneDomingoySabado(ini, fin,l.getFuncionario().getHorarios());
                            Integer fer=this.compararFechas(ini, fin).size();
                            this.lblReal.setText("Dias tomados en cuenta "+real.toString()+", verifique el saldo");
                            this.lblMsg.setText("Considere que en este rango hay "+dom+" días que no cuentan, y "+fer+" feriados");
                        }

                    }
                }
                else{
                    this.lblMsg.setText("Verifique los datos");
                }
            }
            else{
                this.lblMsg.setText("No está permitido esa cantidad de días para la licencia elegida");
            }
        }
        else{
            this.lblMsg.setText("Ingrese días a tomar");
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void comboTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTipoItemStateChanged
        this.txtSaldo.setText("");
        this.txtdias.setText("");
        this.txtFechaFIn.setDate(null);
        this.txtFechaIni.setDate(null);
        this.lblMsg.setText("");
        this.lblReal.setText("");
        Integer setSaldo=0;
        this.txtdias.requestFocus();
        if(this.comboTipo.getSelectedItem()!=null){
            Codigo c=(Codigo) this.comboTipo.getSelectedItem();
            if(c.getCod().equals(10)){
                if(lista!=null){
                    this.comboAño.removeAllItems();
                    for(int i=0;i<lista.size();i++){
                        this.comboAño.addItem(lista.get(i));
                        //this.comboAño.setSelectedIndex(1);
                    }
                }
                this.lblGen.setText("Año Licencia Generada");
                this.lblGen.setVisible(true);
                this.comboAño.setVisible(true);
                if(lista!=null){
                    if(!lista.isEmpty()){
                        this.lblMsg.setText("");
                        this.lblNombres.setText(lista.get(0).getFuncionario().getNomCompleto());
                        this.txtSaldo.setText(lista.get(0).getSaldo().toString());
                    }
                }
            }
            else if(c.getCod().equals(1000)){
                if(listaPasado!=null){
                    this.comboAño.removeAllItems();
                    for(int i=0;i<listaPasado.size();i++){
                        this.comboAño.addItem(listaPasado.get(i));
                        //this.comboAño.setSelectedIndex(1);
                    }
                }
                this.lblGen.setText("Año Licencia Generada");
                this.lblGen.setVisible(true);
                this.comboAño.setVisible(true);
                if(listaPasado!=null){
                    if(!listaPasado.isEmpty()){
                        this.lblMsg.setText("");
                        this.lblNombres.setText(listaPasado.get(0).getFuncionario().getNomCompleto());
                        this.txtSaldo.setText(listaPasado.get(0).getSaldo().toString());
                    }
                }
            }
            else{
                if(c.getCod().equals(16)){
                    this.comboAño.removeAllItems();
                    try {
                        this.listaFalle=this.log.cargaComboFalle();
                        if(listaFalle!=null){
                            for(int i=0;i<listaFalle.size();i++){
                                this.comboAño.addItem(listaFalle.get(i));
                            }

                        }
                        this.comboAño.setVisible(true);
                        this.lblGen.setText("Parentesco");
                        this.lblGen.setVisible(true);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else{
                    this.lblGen.setVisible(false);
                    this.comboAño.setVisible(false);
                    String codFunc=this.txtCodFunc.getText();
                    Integer saldo=0;
                    switch(c.getCod()){
                        //POR ESTUDIO
                        case 12:
                        {
                            try {
                                saldo=this.log.saldoLicenciaCodigo(codFunc,c.getCod());
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                        //POR DONACION DE SANGRE
                        case 17:
                        {
                            try {
                                saldo=this.log.saldoLicenciaCodigo(codFunc,c.getCod());
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                        //POR LEY 17.242
                        case 19:
                        {
                            try {
                                saldo=this.log.saldoLicenciaCodigo(codFunc,c.getCod());
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                        //LICENCIA ESPECIAL
                        case 58:
                        {
                            try {
                                saldo=this.log.saldoLicenciaCodigo(codFunc,c.getCod());
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                        case 85:
                        {
                            try {
                                saldo=this.log.saldoLicenciaCodigo(codFunc,c.getCod());
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(InternalMovLicencia.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        break;
                    }
                    setSaldo=c.getValor()-saldo;
                    this.txtSaldo.setText(setSaldo.toString());

                }
            }
        }

    }//GEN-LAST:event_comboTipoItemStateChanged

    private void btnCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcActionPerformed
        Date fechaIni=this.txtFechaIni.getDate();
        Integer gen=null;
        ArrayList<Horario> listaHor=null;
        if(!"".equals(this.txtdias.getText())){
            gen=Integer.valueOf(this.txtdias.getText());
        }
        listaHor=this.f.getHorarios();

        if(fechaIni!=null&&listaHor!=null){
            if(gen!=null){
                this.txtFechaFIn.setDate(this.log.obtieneFechaFin(fechaIni, gen, listaHor));
            }
            else{
                this.lblMsg.setText("Ingrese dias a tomar");
            }

        }
    }//GEN-LAST:event_btnCalcActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        instancia=null;
    }//GEN-LAST:event_formInternalFrameClosed

    
    private void cargaComboTipo() throws SQLException, ClassNotFoundException {
      ArrayList<Codigo> codigos=this.logC.cargaComboCodigoLic();
      for(Codigo c:codigos){
          if(c.getCod()!=1001){
            this.comboTipo.addItem(c);
          }
      }
    }
    
      private void limpiar(){
        this.lblNombres.setText("");
        this.txtdias.setText("");
        this.txtSaldo.setText("");
        this.comboAño.removeAllItems();
    }
      
    private String obtenerAño(Date d){
        
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(d);
        String t=String.valueOf(calendar.get(Calendar.YEAR));
        return t;
    }
    
     private boolean chequeaDiasATomar(Codigo c, String dias) {
        Integer d=Integer.valueOf(dias);
        boolean retorno=false;
         switch(c.getCod())
        {
             case 12:
                 if(d<=3){
                     retorno=true;
                 }
             break;
             case 14:
                 if(d==10){
                     retorno=true;
                 }
             break;
             case 15:
                 if(d==15){
                     retorno=true;
                 }
             break;
             case 17:
                 if(d==1){
                     retorno=true;
                 }
             break;
             case 85:
                 if(d==1){
                     retorno=true;
                 }
             break;
             default:
                 retorno=true;
    }
         return retorno;
    }
     
           //PAQUETE MANEJA FECHAS, FERIADOS, SABADO Y DOMINGO//
    private ArrayList<Feriado> compararFechas(Date fechaIni, Date fechaFin) {
        Integer dias=0;
        ArrayList<Feriado> aux=new ArrayList<>();
        
        for(Feriado f:this.listaFeriados){
            if((fechaIni.equals(f.getFecha())||fechaIni.before(f.getFecha()))&& (fechaFin.equals(f.getFecha())||fechaFin.after(f.getFecha()))){
                aux.add(f);
            }
        }
        
        return aux;
    }
    
  private Integer obtieneDomingoySabado(Date fechaIni, Date fechaFin,ArrayList<Horario>horarios){
    Integer contador=0;
    Calendar c1 = Calendar.getInstance();
    c1.setTime(fechaIni);
    Calendar c2 = Calendar.getInstance();
    c2.setTime(fechaFin);
    ArrayList<Date> listaFechas = new ArrayList<Date>();
    boolean Domingo=this.diaEsta(horarios,"DOMINGO");
//    boolean Sabado=this.diaEsta(horarios,"SABADO");
    
    while (!c1.after(c2)) {
        listaFechas.add(c1.getTime());
        c1.add(Calendar.DAY_OF_MONTH, 1);
    }
    
    for (Iterator<Date> it = listaFechas.iterator(); it.hasNext();) {
          Date date = it.next();
          GregorianCalendar cal = new GregorianCalendar();
          cal.setTime(date);
          
          if(!Domingo){
            if(cal.get(Calendar.DAY_OF_WEEK)==1){
                  contador++;
            }	
          }
//          if(!Sabado){
//            if(cal.get(Calendar.DAY_OF_WEEK)==7){
//                  contador++;
//          }
//       }
       
    }
     return contador;
  }

    private boolean evaluaFechas(Date fechaIni, Date fechaFin, String gen,ArrayList<Horario>horarios) {
        int dias=(int) ((fechaFin.getTime()-fechaIni.getTime())/86400000);
        dias+=1;
 	Integer domingos=this.obtieneDomingoySabado(fechaIni, fechaFin,horarios);
        Integer feriados=this.compararFechas(fechaIni, fechaFin).size();
        boolean pasa=false;
        real=dias-domingos-feriados;
        Integer generado=Integer.valueOf(gen);
        if(real<=generado){
            pasa=true;
        }
        return pasa;
    }

    private boolean diaEsta(ArrayList<Horario> horarios, String dia) {
        boolean esta=false;
        int i=0;
        while(i<horarios.size()&&!esta){
            if(horarios.get(i).getDescripcion().equals(dia)){
                esta=true;
            }
            i++;
        }
        return esta;
    }    
    
    //-------------//----------------//


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonIcon btnAceptar;
    private org.edisoncor.gui.button.ButtonIcon btnBuscar;
    private javax.swing.JButton btnCalc;
    private javax.swing.JComboBox comboAño;
    private javax.swing.JComboBox comboTipo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblGen;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblNombres;
    private javax.swing.JLabel lblReal;
    private org.edisoncor.gui.textField.TextFieldRound txtCodFunc;
    private com.toedter.calendar.JDateChooser txtFechaFIn;
    private com.toedter.calendar.JDateChooser txtFechaIni;
    private org.edisoncor.gui.textField.TextFieldRound txtSaldo;
    private org.edisoncor.gui.textField.TextFieldRound txtdias;
    // End of variables declaration//GEN-END:variables
}
