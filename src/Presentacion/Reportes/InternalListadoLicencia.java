
package Presentacion.Reportes;

import Dominio.Licencia;
import Dominio.Sucursal;
import Logica.LogFuncionario;
import Logica.logPdf;
import Presentacion.Licencias.InternalAdelantado;
import Presentacion.RenderLicencia;
import Presentacion.frmPrin;
import com.itextpdf.text.DocumentException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;


public class InternalListadoLicencia extends javax.swing.JInternalFrame {

    
    private logPdf logPdf;
    private LogFuncionario log;
    private ArrayList<Licencia> listado;
    public ArrayList<String> Meses;
    private static InternalListadoLicencia instancia =null;
    
    private InternalListadoLicencia() throws ClassNotFoundException, SQLException {
        initComponents();
        this.log=new LogFuncionario();
        listado=new ArrayList<>();
        this.cargaCombo();
        this.jPanel1.setVisible(true);
        this.btnPdf.setEnabled(false);
        Meses = new ArrayList(12);
        this.agregarMeses();
    }
               
    
    public static InternalListadoLicencia instancia() throws ClassNotFoundException, SQLException
   {    
         if (instancia== null)
         {
            instancia = new InternalListadoLicencia();
         }
         return instancia;
      
   }
    
    public void agregarMeses() {
        Meses.add(0, "ENERO");
        Meses.add(1, "FEBRERO");
        Meses.add(2, "MARZO");
        Meses.add(3, "ABRIL");
        Meses.add(4, "MAYO");
        Meses.add(5, "JUNIO");
        Meses.add(6, "JULIO");
        Meses.add(7, "AGOSTO");
        Meses.add(8, "SEPTIEMBRE");
        Meses.add(9, "OCTUBRE");
        Meses.add(10, "NOVIEMBRE");
        Meses.add(11, "DICIEMBRE");
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonIcon1 = new org.edisoncor.gui.button.ButtonIcon();
        btnPdf = new org.edisoncor.gui.button.ButtonIcon();
        jLabel1 = new javax.swing.JLabel();
        btnCalc = new org.edisoncor.gui.button.ButtonIcon();
        comboAño = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        btnListar = new org.edisoncor.gui.button.ButtonIcon();
        jLabel3 = new javax.swing.JLabel();
        comboLugar = new javax.swing.JComboBox();
        comboMes = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaLic = new javax.swing.JTable();
        lblMsg = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setMaximumSize(new java.awt.Dimension(1280, 768));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Licencia Generada", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ebrima", 1, 18))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 700));
        jPanel1.setLayout(null);

        buttonIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Excel_2013_23480.png"))); // NOI18N
        buttonIcon1.setText("buttonIcon1");
        buttonIcon1.setToolTipText("Exportar a Excel");
        buttonIcon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIcon1ActionPerformed(evt);
            }
        });
        jPanel1.add(buttonIcon1);
        buttonIcon1.setBounds(610, 60, 70, 69);

        btnPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/pdf.png"))); // NOI18N
        btnPdf.setText("buttonIcon1");
        btnPdf.setToolTipText("Exportar a Excel");
        btnPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfActionPerformed(evt);
            }
        });
        jPanel1.add(btnPdf);
        btnPdf.setBounds(720, 60, 70, 69);

        jLabel1.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        jLabel1.setText("Generar Comunicado Mensual de Licencia Anual");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(700, 40, 264, 20);

        btnCalc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/calcular.png"))); // NOI18N
        btnCalc.setText("buttonIcon1");
        btnCalc.setToolTipText("Calcular");
        btnCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalc);
        btnCalc.setBounds(50, 60, 69, 60);

        comboAño.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                comboAñoFocusGained(evt);
            }
        });
        jPanel1.add(comboAño);
        comboAño.setBounds(310, 70, 164, 26);

        jLabel2.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        jLabel2.setText("Generar Días de Licencia");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(23, 41, 156, 17);

        btnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/tabla.png"))); // NOI18N
        btnListar.setText("buttonIcon1");
        btnListar.setToolTipText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });
        jPanel1.add(btnListar);
        btnListar.setBounds(220, 60, 69, 64);

        jLabel3.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        jLabel3.setText("Listar por Año generada");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(314, 41, 150, 17);

        jPanel1.add(comboLugar);
        comboLugar.setBounds(800, 70, 164, 26);

        jPanel1.add(comboMes);
        comboMes.setBounds(800, 100, 164, 26);

        tablaLic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num Funcionario", "Fecha Ingreso", "Días Generados", "Días Descuento", "Generado Año", "Fecha Generado", "Nombre", "Fecha Inicio", "Fecha Fin", "Cambio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaLic);
        if (tablaLic.getColumnModel().getColumnCount() > 0) {
            tablaLic.getColumnModel().getColumn(9).setMinWidth(0);
            tablaLic.getColumnModel().getColumn(9).setPreferredWidth(0);
            tablaLic.getColumnModel().getColumn(9).setMaxWidth(0);
        }

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(23, 153, 950, 460);
        jPanel1.add(lblMsg);
        lblMsg.setBounds(30, 130, 260, 20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1001, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 989, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 635, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonIcon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonIcon1ActionPerformed
        
        try {
            this.procesarExcel();
        } catch (IOException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_buttonIcon1ActionPerformed

    private void btnPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfActionPerformed
        Sucursal suc=(Sucursal) this.comboLugar.getSelectedItem();
        String año=this.comboAño.getSelectedItem().toString();
        String mes=this.comboMes.getSelectedItem().toString();
        FileOutputStream fileOut = null;
        File filePDF = null;

        try {

            javax.swing.filechooser.FileNameExtensionFilter filterPDF = new javax.swing.filechooser.FileNameExtensionFilter("DocumentosPdf", "pdf");

            final JFileChooser fc = new JFileChooser();
            fc.setFileFilter(filterPDF);
            fc.setSelectedFile(filePDF);
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int seleccion = fc.showSaveDialog(null);
            if (seleccion == JFileChooser.APPROVE_OPTION) {

                filePDF = fc.getSelectedFile();
                String name = filePDF.getName();
                if (name.indexOf('.') == -1) {
                    name += ".pdf";
                    filePDF = new File(filePDF.getParentFile(), name);
                }
                fileOut = new FileOutputStream(filePDF);
            }
            this.logPdf=new logPdf();
            this.logPdf.createPDF(filePDF,this.listado,suc,año,mes);

        } 
        catch (FileNotFoundException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally {

            try {
                if(fileOut!=null){
                    fileOut.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + filePDF.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnPdfActionPerformed

    private void btnCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcActionPerformed
        Date d=new Date();
        String año=this.obtenerAño(d);

        try {
            boolean lics;  lics = this.log.insertarLicencia();
            if(lics==true){
                this.cargaCombo();
                this.lblMsg.setText("Licencia de "+año + ", Generada Exitosamente");
            }
            else{
                this.lblMsg.setText("Licencia de "+año + " ya fue generada anteriormente");
            }
        } catch (SQLException ex) { 
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        }

        //            this.lblNombres.setText(lic.getFuncionario().getNomCompleto());
        //            this.txtAño.setText(lic.getAño().toString());
        //            this.txtFechaFIn.setDate(lic.getFechaFin());
        //            this.txtFechaIni.setDate(lic.getFechaIni());
        //            this.txtSaldo.setText(lic.getSaldo().toString());
        this.lblMsg.setText("Licencia de "+año + ", Generada Exitosamente");
    }//GEN-LAST:event_btnCalcActionPerformed

    private void comboAñoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comboAñoFocusGained
        this.btnPdf.setEnabled(true);
        this.LimpiarTabla();
        this.comboLugar.removeAllItems();
        this.comboMes.removeAllItems();
    }//GEN-LAST:event_comboAñoFocusGained

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        this.btnPdf.setEnabled(false);
        this.LimpiarTabla();
        String str=this.comboAño.getSelectedItem().toString();
        try {
            listado=log.listadoLicencia(str);
            Alinear_Grillas();
            this.cargarTabla(listado);
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(InternalListadoLicencia.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnListarActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
       instancia=null;
    }//GEN-LAST:event_formInternalFrameClosed

    
     private void cargaCombo() throws SQLException, ClassNotFoundException{
    ArrayList<String> lista=log.cargaComboLicAñosDistintos();
            this.comboAño.removeAllItems();
            if(lista.size()>0){
                for(int i=0;i<lista.size();i++){
                    this.comboAño.addItem(lista.get(i));
                    
                }
            }
    }
     
     public void procesarExcel() throws IOException{
   if(!this.listado.isEmpty()){
    this.lblMsg.setVisible(false);
    java.io.ByteArrayOutputStream memoryStream = null;
    javax.swing.filechooser.FileNameExtensionFilter filterXls = new javax.swing.filechooser.FileNameExtensionFilter("Documentosxcel 95/2003", "xls");
    
        
        File fileXLS = null;
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(filterXls);
        fc.setSelectedFile(fileXLS);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
     
        int seleccion = fc.showSaveDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            FileOutputStream fileOut = null;
            
            String[] headers = new String[]{
                "Num. Funcionario",
                "Fecha de Ingreso",
                "Días Generados",
                "Año",
                "Fecha Generado",
                "Nombre1",
                "Nombre2",
                "Apellido1",
                "Apellido2",
                

            };
      
              fileXLS = fc.getSelectedFile();
              String name = fileXLS.getName();
                if (name.indexOf('.') == -1) {
  
                    name += ".xls";
                    fileXLS = new File(fileXLS.getParentFile(), name);
                }
              fileOut = new FileOutputStream(fileXLS);
              
              HSSFWorkbook libro = new HSSFWorkbook();
              Sheet hoja = libro.createSheet("Mi hoja de trabajo 1");
              //estilo celda
              HSSFCellStyle estilo = libro.createCellStyle();
              estilo.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
              estilo.setFillForegroundColor(HSSFColor.RED.index);  
              
              for(int i=0;i<=listado.size();i++){
                  Row fila = hoja.createRow(i);
                  
                  
                  for(int c=0;c<headers.length;c++){
                    Cell celda = fila.createCell(c);
                 
                    hoja.setColumnWidth(c, 5000);
                    
                        if(i==0){
                            celda.setCellValue(headers[c]);

                        }
                            else{
                                    switch(c)
                                    {
                                        case 0:
                                            String num=String.valueOf(listado.get(i-1).getFuncionario().getCodFunc());
                                            celda.setCellValue(num);
                                            break;
                                        case 1:
                                            celda.setCellValue(this.formateo(listado.get(i-1).getFuncionario().getFechaIngreso()));
                                            break;
                                        case 2:
                                            if(listado.get(i-1).getCambio()){
                                            celda.setCellValue(listado.get(i-1).getDiasGenerados());
                                            celda.setCellStyle(estilo);
                                            }
                                            else if(!listado.get(i-1).getCambio()){
                                            celda.setCellValue(listado.get(i-1).getDiasGenerados());
                                            }
                                            break;
                                        case 3:
                                            celda.setCellValue(listado.get(i-1).getAño()-1);
                                            break;   
                                        case 4:
                                            celda.setCellValue(this.formateo(listado.get(i-1).getFechaGen()));
                                            break;
                                        case 5:
                                            celda.setCellValue(listado.get(i-1).getFuncionario().getNombre1().trim());
                                            break;
                                        case 6:
                                            celda.setCellValue(listado.get(i-1).getFuncionario().getNombre2());
                                            break; 
                                        case 7:
                                            celda.setCellValue(listado.get(i-1).getFuncionario().getApellido1().trim());
                                            break;
                                        case 8:
                                            celda.setCellValue(listado.get(i-1).getFuncionario().getApellido2());
                                            break; 
                                  

                                    }
                                }

                    }
              
              }
              libro.write(fileOut);
            
            
        
           
        
                
  //Cerramos nuestro archivo
                    fileOut.close();
                  
                        Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + fileXLS.getAbsolutePath());
                  

                
        }
    
   }
   else{
       this.lblMsg.setText("No hay ninguna tabla cargada para exportar");
       this.lblMsg.setVisible(true);
   }
}
     
     private String obtenerAño(Date d){
        
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(d);
        String t=String.valueOf(calendar.get(Calendar.YEAR));
        return t;
    }
     
      private void LimpiarTabla() {
        
        DefaultTableModel modelo=(DefaultTableModel) tablaLic.getModel();
        //primero limpio todas las filas
        for (int i = 0; i < tablaLic.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
    }
      
      private void cargarTabla(ArrayList<Licencia> listado ) throws ClassNotFoundException, SQLException, InterruptedException{
           
        this.comboLugar.removeAllItems();
        this.comboMes.removeAllItems();
        Integer cont=listado.size();
        this.lblMsg.setText(cont + " Funcionarios mostrados.");
        this.lblMsg.setVisible(true);
        DefaultTableModel modelo = (DefaultTableModel)tablaLic.getModel();
        Object[] filas=new Object[modelo.getColumnCount()];
        
      
        if(listado.size()>0){
                                                          
                    for(Licencia f:listado){                       
                            
                            filas[0]=f.getFuncionario().getCodFunc();
                            filas[1]=this.formateo(f.getFuncionario().getFechaIngreso());
                            filas[2]=f.getDiasGenerados();
                            filas[3]=f.getDiasDescuento();
                            filas[4]=f.getAño()-1;
                            filas[5]=this.formateo(f.getFechaGen());
                            filas[6]=f.getFuncionario().getNomApe();
                            filas[7]=this.formateo(f.getFechaIni());
                            filas[8]=this.formateo(f.getFechaFin());
                            filas[9]=f.getCambio();
                            RenderLicencia rr=new RenderLicencia(9);
                            tablaLic.setDefaultRenderer(Object.class, rr);
                            modelo.addRow(filas);
                            this.cargaComboSuc(f);
                            
                    }
               
        }
        this.resizeColumnWidth(tablaLic);
        JTableHeader th; 
        th = tablaLic.getTableHeader(); 
        Font fuente = new Font("Ebrima", Font.BOLD, 12); 
        th.setBackground(Color.LIGHT_GRAY);
        th.setFont(fuente);  
        tablaLic.setColumnSelectionAllowed(false);
        tablaLic.setRowSelectionAllowed(true);
        
    }
      
      private void Alinear_Grillas(){
            
//        DefaultTableCellRenderer modelo = new DefaultTableCellRenderer();
//        modelo.setHorizontalAlignment(SwingConstants.RIGHT);
//        modelo.setBackground(Color.red); 
//        this.tablaLic.getColumnModel().getColumn(0).setCellRenderer(modelo); 
//        this.tablaLic.getColumnModel().getColumn(2).setCellRenderer(modelo); 
//        this.tablaLic.getColumnModel().getColumn(3).setCellRenderer(modelo);    
//            
    }
      
      private String formateo(Date hoy){
      String retorno="";
      if(hoy!=null){   
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy");
         retorno=formateador.format(hoy);
      }
      return retorno;
     }  
      
      private void cargaComboSuc(Licencia f){
        Object lugar=null;
        Integer mes=null;
        Date hoy=new Date();   
        String mesHoy=String.valueOf(Integer.valueOf(this.obtenerMes(hoy)));
        String mesTexto=this.obtenerMesEscrito(mesHoy);
         if(f.getFechaIni()!=null){
                    this.btnPdf.setEnabled(true); 
                    lugar=f.getFuncionario().getLugarTrabajo();
                    if(!this.esta(lugar)){
                       this.comboLugar.addItem(lugar);
                    }
                    mes=Integer.valueOf(this.obtenerMes(f.getFechaIni()));
                    String m=this.Meses.get(mes-1);
                    if(!this.mesEsta(m)){
                        this.comboMes.addItem(this.Meses.get(mes-1));
                    }
           }
        }
    //MANEJO TAMAÑO COLUMNAS
    public void resizeColumnWidth(JTable table) {
    final TableColumnModel columnModel = table.getColumnModel();
    for (int column = 0; column < table.getColumnCount(); column++) {
        int width = 160; // Min width
        for (int row = 0; row < table.getRowCount(); row++) {
            TableCellRenderer renderer = table.getCellRenderer(row, column);
            Component comp = table.prepareRenderer(renderer, row, column);
            width = Math.max(comp.getPreferredSize().width +1 , width);
        }
        if(width > 100)
            width=150;
        columnModel.getColumn(column).setPreferredWidth(width);
    }
}    

      private String obtenerMes(Date hoy) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(hoy);
        String t=String.valueOf(calendar.get(Calendar.MONTH)+1);
        return t;
    }
      
      private String obtenerMesEscrito(String m) {
        String ret="";
        
        switch(m){
            case "1":
                ret="ENERO";
            break;
            case "2":
                ret="FEBRERO";
            break;
            case "3":
                ret="MARZO";
            break;
            case "4":
                ret="ABRIL";
            break;
            case "5":
                ret="MAYO";
            break;
            case "6":
                ret="JUNIO";
            break;
            case "7":
                ret="JULIO";
            break;
            case "8":
                ret="AGOSTO";
            break;
            case "9":
                ret="SEPTIEMBRE";
            break;
            case "10":
                ret="OCTUBRE";
            break;
            case "11":
                ret="NOVIEMBRE";
            break;
            case "12":
                ret="DICIEMBRE";
            break;
            default:
            break;
        }
        return ret;
    }
      
          private boolean esta(Object lugar) {
            boolean esta=false;
            int i=0;
            while(i<this.comboLugar.getItemCount()&&!esta){
                  if(this.comboLugar.getItemAt(i)==lugar){
                    esta=true;
                    }
                                
                  i++;
            }
            return esta;
    }
          
    private boolean mesEsta(Object mes) {
            boolean esta=false;
            int i=0;
            while(i<this.comboMes.getItemCount()&&!esta){
                  if(this.comboMes.getItemAt(i)==mes){
                    esta=true;
                    }
                                
                  i++;
            }
            return esta;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonIcon btnCalc;
    private org.edisoncor.gui.button.ButtonIcon btnListar;
    private org.edisoncor.gui.button.ButtonIcon btnPdf;
    private org.edisoncor.gui.button.ButtonIcon buttonIcon1;
    private javax.swing.JComboBox comboAño;
    private javax.swing.JComboBox comboLugar;
    private javax.swing.JComboBox comboMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JTable tablaLic;
    // End of variables declaration//GEN-END:variables
}
