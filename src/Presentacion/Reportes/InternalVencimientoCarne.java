
package Presentacion.Reportes;

import Dominio.Funcionario;
import Logica.LogFuncionario;
import Presentacion.Licencias.InternalAdelantado;
import Presentacion.Renderizado;
import Presentacion.frmPrin;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;


public class InternalVencimientoCarne extends javax.swing.JInternalFrame {
     private LogFuncionario LogF;
     private frmPrin frm;
     ArrayList<Funcionario> listado;
     private static InternalVencimientoCarne instancia=null;
    public InternalVencimientoCarne() throws ClassNotFoundException, SQLException {
        initComponents();
        LogF=new LogFuncionario();
        listado=new ArrayList<>();
        this.jPanel1.setVisible(true);
       
    }
    
   public static InternalVencimientoCarne instancia() throws ClassNotFoundException, SQLException
   {    
         if (instancia== null)
         {
            instancia = new InternalVencimientoCarne();
         }
         return instancia;
      
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonIcon1 = new org.edisoncor.gui.button.ButtonIcon();
        btnListar = new org.edisoncor.gui.button.ButtonIcon();
        check = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaFunc = new javax.swing.JTable();
        lblMsg = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setPreferredSize(new java.awt.Dimension(1022, 650));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vencimientos Carne de Salud", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Ebrima", 1, 18)), "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 700));
        jPanel1.setLayout(null);

        buttonIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Excel_2013_23480.png"))); // NOI18N
        buttonIcon1.setText("buttonIcon1");
        buttonIcon1.setToolTipText("Exportar a Excel");
        buttonIcon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIcon1ActionPerformed(evt);
            }
        });
        jPanel1.add(buttonIcon1);
        buttonIcon1.setBounds(98, 70, 70, 69);

        btnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/tabla.png"))); // NOI18N
        btnListar.setText("buttonIcon1");
        btnListar.setToolTipText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });
        jPanel1.add(btnListar);
        btnListar.setBounds(18, 69, 68, 70);

        check.setText("Vencidos y por vencerse");
        jPanel1.add(check);
        check.setBounds(186, 109, 158, 28);

        tablaFunc.setAutoCreateRowSorter(true);
        tablaFunc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num. Funcionario", "Apellido1", "Apellido2", "Nombre1", "Nombre2", "Fecha Vencimiento", "Diferenicia Dias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaFunc);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 967, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(18, 157, 967, 442);
        jPanel1.add(lblMsg);
        lblMsg.setBounds(186, 78, 300, 19);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonIcon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonIcon1ActionPerformed
        try {
            this.procesarExcel();
        } catch (IOException ex) {
            Logger.getLogger(InternalVencimientoCarne.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_buttonIcon1ActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        if(!this.check.isSelected()){
            try {
                this.cargarTabla();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InternalVencimientoCarne.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InternalVencimientoCarne.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {

                this.cargarTablaVencidos();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InternalVencimientoCarne.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InternalVencimientoCarne.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        Alinear_Grillas();
    }//GEN-LAST:event_btnListarActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        instancia=null;
    }//GEN-LAST:event_formInternalFrameClosed

    private void cargarTablaVencidos() throws ClassNotFoundException, SQLException{
        this.LimpiarTablaFuncionarios();
        listado=this.LogF.listadoVencidos();
        DefaultTableModel modelo = (DefaultTableModel)tablaFunc.getModel();
        
        Object[] filas=new Object[modelo.getColumnCount()];
        Date fecha=new Date();
             
        if(listado.size()>0){
                                                          
                    for(Funcionario f:listado){                       
                            
                            filas[0]=f.getCodFunc();
                            filas[1]=f.getApellido1().trim();
                            filas[2]=f.getApellido2().trim();
                            filas[3]=f.getNombre1().trim();
                            filas[4]=f.getNombre2().trim();
                            filas[5]=this.formateo(f.getVencimientoCarne());
                            if(f.getVencimientoCarne()!=null){
                            int dias=(int) ((f.getVencimientoCarne().getTime()-fecha.getTime())/86400000);
                            filas[6]=dias;
                            }
                            else{
                            filas[6]="";
                            }
                            Renderizado rr = new Renderizado(6);
                            tablaFunc.setDefaultRenderer(Object.class, rr);
                            modelo.addRow(filas);
                      }
                }
        JTableHeader th; 
        th = tablaFunc.getTableHeader(); 
        Font fuente = new Font("Ebrima", Font.BOLD, 14); 
        th.setBackground(Color.LIGHT_GRAY);
        th.setFont(fuente); 
        this.jPanel1.setVisible(true);
    }
    
    
  public void procesarExcel() throws IOException{
   if(this.listado!=null){
    this.lblMsg.setVisible(false);
    java.io.ByteArrayOutputStream memoryStream = null;
    javax.swing.filechooser.FileNameExtensionFilter filterXls = new javax.swing.filechooser.FileNameExtensionFilter("Documentosxcel 95/2003", "xls");

        File fileXLS = null;
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(filterXls);
        fc.setSelectedFile(fileXLS);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
     
        int seleccion = fc.showSaveDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            FileOutputStream fileOut = null;
            
            String[] headers = new String[]{
                "Num. Funcionario",
                "Apellido1",
                "Apellido2",
                "Nombre1",
                "Nombre2",
                "Fecha de Vencimiento",
                "Diferencia"

            };
        try {
              fileXLS = fc.getSelectedFile();
              String name = fileXLS.getName();
                if (name.indexOf('.') == -1) {
  
                    name += ".xls";
                    fileXLS = new File(fileXLS.getParentFile(), name);
                }
              fileOut = new FileOutputStream(fileXLS);
              
              Workbook libro = new HSSFWorkbook();
              Sheet hoja = libro.createSheet("Mi hoja de trabajo 1");
                          
              for(int i=0;i<=listado.size();i++){
                  Row fila = hoja.createRow(i);
                  
                  
                  for(int c=0;c<headers.length;c++){
                    Cell celda = fila.createCell(c);
                 
                    hoja.setColumnWidth(c, 5000);
                    
                        if(i==0){
                            celda.setCellValue(headers[c]);

                        }
                            else{
                                    switch(c)
                                    {
                                        case 0:
                                            String num=String.valueOf(listado.get(i-1).getCodFunc());
                                            celda.setCellValue(num);
                                            break;
                                        case 1:
                                            celda.setCellValue(listado.get(i-1).getApellido1().trim());
                                            break;
                                        case 2:
                                            celda.setCellValue(listado.get(i-1).getApellido2());
                                            break;
                                        case 3:
                                            celda.setCellValue(listado.get(i-1).getNombre1().trim());
                                            break;   
                                        case 4:
                                            celda.setCellValue(listado.get(i-1).getNombre2());
                                            break;
                                        case 5:
                                            if(listado.get(i-1).getVencimientoCarne()!=null){
                                            celda.setCellValue(this.formateo(listado.get(i-1).getVencimientoCarne()));
                                            }
                                            else{
                                            celda.setCellValue("");
                                            }
                                            break;
                                        case 6:
                                            if(listado.get(i-1).getVencimientoCarne()!=null){
                                            Date fecha=new Date();
                                            int dias=(int) ((listado.get(i-1).getVencimientoCarne().getTime()-fecha.getTime())/86400000);
                                            celda.setCellValue(dias);
                                            }
                                            else{
                                            celda.setCellValue("");
                                            }
                                            break; 

                                    }
                                }

                    }
              
              }
              libro.write(fileOut);
            
            
        
          } catch (IOException ex) {
              Logger.getLogger(InternalVencimientoCarne.class.getName()).log(Level.SEVERE, null, ex);
          }
          finally {
                
  //Cerramos nuestro archivo
                    fileOut.close();
                  
                        Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + fileXLS.getAbsolutePath());
                  

                } 
        }
    
   }
   else{
       this.lblMsg.setText("No hay ninguna tabla cargada para exportar");
       this.lblMsg.setVisible(true);
   }
}

     private String formateo(Date hoy){
      String ret="";
      if(hoy!=null){  
      SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy");
      ret=formateador.format(hoy);
        }
      return ret;
     }  
     
     private void Alinear_Grillas(){
            
        DefaultTableCellRenderer modelo = new DefaultTableCellRenderer();
        modelo.setHorizontalAlignment(SwingConstants.RIGHT);
        this.tablaFunc.getColumnModel().getColumn(0).setCellRenderer(modelo); 
        this.tablaFunc.getColumnModel().getColumn(6).setCellRenderer(modelo); 
       
            
    }
     
      private void LimpiarTablaFuncionarios() {
        
        DefaultTableModel modelo=(DefaultTableModel) tablaFunc.getModel();
        //primero limpio todas las filas
        for (int i = 0; i < tablaFunc.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
    }
      
       public void cargarTabla() throws ClassNotFoundException, SQLException{
        this.LimpiarTablaFuncionarios();
        listado=LogF.vencimientoCarne();
        DefaultTableModel modelo = (DefaultTableModel)tablaFunc.getModel();
        
        Object[] filas=new Object[modelo.getColumnCount()];
        Date fecha=new Date();
        
                
        if(listado.size()>0){
                                                          
                    for(Funcionario f:listado){                       
                            
                            filas[0]=f.getCodFunc();
                            filas[1]=f.getApellido1().trim();
                            if(f.getApellido2()!=null){
                            filas[2]=f.getApellido2().trim();
                            }
                            else{
                            filas[2]=f.getApellido2();    
                            }
                            filas[3]=f.getNombre1().trim();
                            if(f.getNombre2()!=null){
                            filas[4]=f.getNombre2().trim();
                            }
                            else{
                            filas[4]=f.getNombre2();
                            }
                            filas[5]=this.formateo(f.getVencimientoCarne());
                            if(f.getVencimientoCarne()!=null){
                            int dias=(int) ((f.getVencimientoCarne().getTime()-fecha.getTime())/86400000);
                            filas[6]=dias;
                            }
                            else{
                            filas[6]="";
                            }
                            Renderizado rr = new Renderizado(6);
                            tablaFunc.setDefaultRenderer(Object.class, rr);
                            modelo.addRow(filas);
                      }
                }
        JTableHeader th; 
        th = tablaFunc.getTableHeader(); 
        Font fuente = new Font("Ebrima", Font.BOLD, 14); 
        th.setBackground(Color.LIGHT_GRAY);
        th.setFont(fuente); 
        this.jPanel1.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonIcon btnListar;
    private org.edisoncor.gui.button.ButtonIcon buttonIcon1;
    private javax.swing.JCheckBox check;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JTable tablaFunc;
    // End of variables declaration//GEN-END:variables
}
