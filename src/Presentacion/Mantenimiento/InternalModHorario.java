package Presentacion.Mantenimiento;


import Dominio.Banco;
import Dominio.Horario;
import Logica.LogHorario;

import java.sql.SQLException;
import java.sql.Time;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class InternalModHorario extends javax.swing.JInternalFrame {
     LogHorario log;
     Horario h;
     private static InternalModHorario instancia=null; 
     private InternalModHorario() throws SQLException, ClassNotFoundException {
        initComponents();
        this.log=new LogHorario();
        this.jPanel1.setVisible(true);
        this.cargaHorarios();
    }

       public static InternalModHorario instancia() throws ClassNotFoundException, SQLException
   {    
         if (instancia== null)
         {
            instancia = new InternalModHorario();
         }
         return instancia;
      
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlNuevoHorario = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtEntrada = new org.edisoncor.gui.textField.TextFieldRound();
        txtEntradaInter = new org.edisoncor.gui.textField.TextFieldRound();
        txtSalida = new org.edisoncor.gui.textField.TextFieldRound();
        txtSalidaInter = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel6 = new javax.swing.JLabel();
        buttonAqua4 = new org.edisoncor.gui.button.ButtonIcon();
        btnNuevo = new org.edisoncor.gui.button.ButtonIcon();
        buttonAqua2 = new org.edisoncor.gui.button.ButtonIcon();
        comboDias = new javax.swing.JComboBox();
        lblNuevo = new javax.swing.JLabel();
        lblMsg = new javax.swing.JLabel();
        comboHorario = new javax.swing.JComboBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mantenimiento Horarios", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Ebrima", 1, 18))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(530, 540));

        jLabel1.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel1.setText("Horarios Existentes");

        pnlNuevoHorario.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ebrima", 1, 12))); // NOI18N
        pnlNuevoHorario.setPreferredSize(new java.awt.Dimension(500, 460));

        jLabel2.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel2.setText("Hora Entrada:");

        jLabel3.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel3.setText("Hora Salida Inter:");

        jLabel4.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel4.setText("Hora Salida:");

        jLabel5.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel5.setText("Hora Entrada Inter:");

        txtEntrada.setBackground(new java.awt.Color(102, 153, 255));
        txtEntrada.setForeground(new java.awt.Color(255, 255, 255));
        txtEntrada.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEntrada.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEntradaKeyTyped(evt);
            }
        });

        txtEntradaInter.setBackground(new java.awt.Color(102, 153, 255));
        txtEntradaInter.setForeground(new java.awt.Color(255, 255, 255));
        txtEntradaInter.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEntradaInter.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtEntradaInter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEntradaInterKeyTyped(evt);
            }
        });

        txtSalida.setBackground(new java.awt.Color(102, 153, 255));
        txtSalida.setForeground(new java.awt.Color(255, 255, 255));
        txtSalida.setCaretColor(new java.awt.Color(255, 255, 255));
        txtSalida.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtSalida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalidaKeyTyped(evt);
            }
        });

        txtSalidaInter.setBackground(new java.awt.Color(102, 153, 255));
        txtSalidaInter.setForeground(new java.awt.Color(255, 255, 255));
        txtSalidaInter.setCaretColor(new java.awt.Color(255, 255, 255));
        txtSalidaInter.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtSalidaInter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalidaInterKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Euphemia", 1, 14)); // NOI18N
        jLabel6.setText("Dias:");

        buttonAqua4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Ok.png"))); // NOI18N
        buttonAqua4.setText("buttonIcon1");
        buttonAqua4.setToolTipText("Aceptar");
        buttonAqua4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAqua4ActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("buttonIcon1");
        btnNuevo.setToolTipText("Nuevo Horario");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        buttonAqua2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        buttonAqua2.setText("buttonIcon1");
        buttonAqua2.setToolTipText("Eliminar Horario");
        buttonAqua2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAqua2ActionPerformed(evt);
            }
        });

        comboDias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LUNES A VIERNES", "SABADO", "DOMINGO" }));

        lblNuevo.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lblNuevo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlNuevoHorarioLayout = new javax.swing.GroupLayout(pnlNuevoHorario);
        pnlNuevoHorario.setLayout(pnlNuevoHorarioLayout);
        pnlNuevoHorarioLayout.setHorizontalGroup(
            pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNuevoHorarioLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlNuevoHorarioLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlNuevoHorarioLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(buttonAqua2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(buttonAqua4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtEntradaInter, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlNuevoHorarioLayout.createSequentialGroup()
                            .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(10, 10, 10)
                            .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(comboDias, 0, 301, Short.MAX_VALUE)
                                .addComponent(txtSalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(txtSalidaInter, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        pnlNuevoHorarioLayout.setVerticalGroup(
            pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNuevoHorarioLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSalidaInter, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(13, 13, 13)
                .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtEntradaInter, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlNuevoHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAqua2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAqua4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        lblMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        comboHorario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboHorarioItemStateChanged(evt);
            }
        });
        comboHorario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                comboHorarioMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlNuevoHorario, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(pnlNuevoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEntradaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntradaKeyTyped
        int k = (int) evt.getKeyChar();

        if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==46||k==45||k==8||k==47||k==42||k==43||k==44)  {

            evt.consume();
        }
        if(k==10){

            this.txtSalidaInter.requestFocus();
        }
        if(this.txtEntrada.getText().length()==8){
            evt.consume();
        }

    }//GEN-LAST:event_txtEntradaKeyTyped

    private void txtEntradaInterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntradaInterKeyTyped
        int k = (int) evt.getKeyChar();

        if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==46||k==45||k==8||k==47||k==42||k==43||k==44)  {

            evt.consume();
        }
        if(k==10){

            this.txtSalida.requestFocus();
        }
        if(this.txtEntradaInter.getText().length()==8){
            evt.consume();
        }

    }//GEN-LAST:event_txtEntradaInterKeyTyped

    private void txtSalidaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalidaKeyTyped
        int k = (int) evt.getKeyChar();

        if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==46||k==45||k==8||k==47||k==42||k==43||k==44)  {

            evt.consume();
        }
        if(k==10){

            this.comboDias.requestFocus();
        }
        if(this.txtSalida.getText().length()==8){
            evt.consume();
        }

    }//GEN-LAST:event_txtSalidaKeyTyped

    private void txtSalidaInterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalidaInterKeyTyped
        int k = (int) evt.getKeyChar();

        if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==46||k==45||k==8||k==47||k==42||k==43||k==44)  {

            evt.consume();
        }
        if(k==10){

            this.txtEntradaInter.requestFocus();
        }
        if(this.txtSalidaInter.getText().length()==8){
            evt.consume();
        }

    }//GEN-LAST:event_txtSalidaInterKeyTyped

    private void buttonAqua4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAqua4ActionPerformed
        if(this.comboHorario.getSelectedIndex()!=0){
            h=(Horario) this.comboHorario.getSelectedItem();
        }
        else{
            h=null;
        }
        
        String strEntrada=this.adaptaHora(this.txtEntrada.getText());
        String strSalidaInter=this.adaptaHora(this.txtSalidaInter.getText());
        String strEntradaInter=this.adaptaHora(this.txtEntradaInter.getText());
        String strSalida=this.adaptaHora(this.txtSalida.getText());
        String strDias=this.comboDias.getSelectedItem().toString();

        //Integer codDias=seteaCodigo(strDias);
        //MODIFICACION HORARIO
        if(h!=null){
            Integer cod=h.getCodigo();
            if(!strEntrada.equals("") && !strSalida.equals("") && !strDias.equals("")){
                if( strSalidaInter.equals("")|| strEntradaInter.equals("")){
                    strSalidaInter="0:00:00";
                    strEntradaInter="0:00:00";
                    if(validarHora(strEntrada)&&validarHora(strSalida)){
                        try {
                            Horario ho=new Horario(cod,this.convertir(strEntrada),this.convertir(strSalidaInter),this.convertir(strEntradaInter),this.convertir(strSalida),strDias);
                            if(this.log.modificarHorario(ho)){
                                this.lblMsg.setText("Horario Modificado correctamente");
                                this.lblMsg.setVisible(true);
                                this.limpiar();
                            }
                            else{
                                this.lblMsg.setText("No se pudo modificar el horario");
                                this.lblMsg.setVisible(true);
                                this.limpiar();
                            }
                        } catch (ParseException ex) {
                            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                    }
                    else{
                        this.lblMsg.setText("El formato esperado es HH:mm:ss");
                        this.lblMsg.setVisible(true);

                    }
                }
                else{
                    if(validarHora(strSalidaInter)&&validarHora(strEntradaInter)&& validarHora(strEntrada)&&validarHora(strSalida)){
                        try {
                            Horario ho=new Horario(cod,this.convertir(strEntrada),this.convertir(strSalidaInter), this.convertir(strEntradaInter),this.convertir(strSalida),strDias);
                            if(this.log.modificarHorario(ho)){
                                this.lblMsg.setText("Horario Modificado correctamente");
                                this.lblMsg.setVisible(true);
                                this.limpiar();
                            }
                            else{
                                this.lblMsg.setText("No se pudo modificar el horario");
                                this.lblMsg.setVisible(true);
                                this.limpiar();
                            }
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ParseException ex) {
                            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                    else{
                        this.lblMsg.setText("El formato esperado es HH:mm");
                        this.lblMsg.setVisible(true);
                    }

                }
            }
            else{
                this.lblMsg.setText("Entrada y Salida no pueden ser vacio");
                this.lblMsg.setVisible(true);
            }

        }
        //ALTA HORARIO
        else{

            if(!strEntrada.equals("") && !strSalida.equals("") && !strDias.equals("")){

                if( strSalidaInter.equals("")|| strEntradaInter.equals("")){
                    strSalidaInter="0:00:00";
                    strEntradaInter="0:00:00";
                    if(validarHora(strEntrada)&&validarHora(strSalida)){
                        try {
                            Horario ho=new Horario(this.convertir(strEntrada),this.convertir(strSalidaInter),this.convertir(strEntradaInter),this.convertir(strSalida),strDias);
                            if(this.log.altaHorario(ho)){
                                this.lblMsg.setText("Horario Ingresado correctamente");
                                this.lblMsg.setVisible(true);
                                this.limpiar();
                            }
                            else{
                                this.lblMsg.setText("Este horario ya existe");
                                this.lblMsg.setVisible(true);
                            }         } catch (ClassNotFoundException ex) {
                                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParseException ex) {
                                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        else{
                            this.lblMsg.setText("El formato esperado es HH:mm");
                            this.lblMsg.setVisible(true);
                        }

                    }
                    else{
                        if(validarHora(strSalidaInter)&&validarHora(strEntradaInter)&& validarHora(strEntrada)&&validarHora(strSalida)){
                            try {
                                Horario ho=new Horario(this.convertir(strEntrada),this.convertir(strSalidaInter),this.convertir(strEntradaInter),this.convertir(strSalida),strDias);
                                if(this.log.altaHorario(ho)){
                                    this.lblMsg.setText("Horario Ingresado correctamente");
                                    this.lblMsg.setVisible(true);
                                    this.limpiar();
                                }
                                else{
                                    this.lblMsg.setText("Este horario ya existe");
                                    this.lblMsg.setVisible(true);
                                }
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParseException ex) {
                                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        else{
                            this.lblMsg.setText("El formato esperado es HH:mm:ss");
                            this.lblMsg.setVisible(true);
                        }

                    }

                }
                else{
                    this.lblMsg.setText("Entrada y Salida no pueden ser vacio");
                    this.lblMsg.setVisible(true);
                }

            }
            try {
                this.comboHorario.removeAllItems();
                this.cargaHorarios();
                this.comboHorario.repaint();
                this.comboHorario.revalidate();
            } catch (SQLException ex) {
                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonAqua4ActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.comboHorario.setSelectedIndex(0);
        this.txtEntrada.setText("");
        this.txtSalida.setText("");
        this.txtEntradaInter.setText("");
        this.txtSalidaInter.setText("");
        this.lblMsg.setText("");
        this.h=null;
        this.lblNuevo.setText("Nuevo Horario");
        this.lblMsg.setText("");
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void buttonAqua2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAqua2ActionPerformed
        h=(Horario) this.comboHorario.getSelectedItem();

        try {
            if(h!=null){
                Integer cod=h.getCodigo();
                if(this.log.horarioExisteparaFunc(cod)==0){
                    if(this.log.eliminarHorario(cod)){
                        this.lblMsg.setText("Horario eliminado");
                        this.limpiar();
                    }
                    else{
                        this.lblMsg.setText("Este horario ya se eliminó");
                        this.limpiar();
                    }
                }
                else{
                    this.lblMsg.setText("Este horario esta asignado a almenos un funcionario");
                    this.limpiar();
                }
            }
            else{
                this.lblMsg.setText("Seleccione un horario para eliminar");
                this.limpiar();
            }
        } catch (SQLException ex) {
            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            this.comboHorario.removeAllItems();
            this.cargaHorarios();
            this.comboHorario.repaint();
            this.comboHorario.revalidate();
        } catch (SQLException ex) {
            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InternalModHorario.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_buttonAqua2ActionPerformed

    private void comboHorarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboHorarioItemStateChanged
        if(this.comboHorario.getSelectedIndex()!=0){
            this.recarga();
        }
        else{
            this.txtEntrada.setText("");
            this.txtEntradaInter.setText("");
            this.txtSalida.setText("");
            this.txtSalidaInter.setText("");
        }
    }//GEN-LAST:event_comboHorarioItemStateChanged

    private void comboHorarioMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboHorarioMouseReleased
        this.txtEntrada.requestFocus();
    }//GEN-LAST:event_comboHorarioMouseReleased

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
       instancia=null;
    }//GEN-LAST:event_formInternalFrameClosed

    public void cargaHorarios() throws SQLException, ClassNotFoundException{
       ArrayList<Horario> horarios=log.cargaComboHorario();
       this.comboHorario.addItem("INGRESAR NUEVO");
       for(int i=0; i<horarios.size();i++){
           this.comboHorario.addItem(horarios.get(i));
            this.comboHorario.setSelectedIndex(0);
          }
      }
    
     public String adaptaHora(String str){
         String s=str;
         Integer t=str.length();
         if(str.length()==5){
             if(Character.isDigit(str.charAt(0))&& Character.isDigit(str.charAt(1))&& Character.isDigit(str.charAt(3)) && Character.isDigit(str.charAt(4)) && str.charAt(2)==':'){
             s=s+":00";
         }
         }
         return s;
     }
     
     private Boolean validarHora(String str){
    Boolean valida=false;
    Integer largo=str.length();
   
    if(largo==8){
       Character c1=str.charAt(5);
       Character c=str.charAt(2);
        if(c.equals(':')&& c1.equals(':')){
            if(Character.isDigit(str.charAt(0))&& Character.isDigit(str.charAt(1))&& Character.isDigit(str.charAt(3))&&Character.isDigit(str.charAt(4)) && Character.isDigit(str.charAt(6))&&Character.isDigit(str.charAt(7))){
            valida=true;
        }
        }
    }  
    return valida;
    }
     
      public Time convertir(String str) throws ParseException{
    Time res=null;
    if(!str.equals("")){
    res=Time.valueOf(str);
    }
    return res;
    }
      
    private void limpiar(){
    this.txtEntrada.setText("");
    this.txtEntradaInter.setText("");
    this.txtSalida.setText("");
    this.txtSalidaInter.setText("");
    }  
    
    private void recarga(){
       
       Horario h=(Horario) this.comboHorario.getSelectedItem();
       if(h!=null){
       String entrada=String.valueOf(h.getHoraEntrada());
       String salidaInter=String.valueOf(h.getHoraSalidaInter());
       String entradaInter=String.valueOf(h.getHoraEntradaInter());
       String Salida=String.valueOf(h.getHoraSalida());
       String dias=h.getDescripcion();
       this.txtEntrada.setText(entrada);
       if(salidaInter.equals("00:00:00")&& entradaInter.equals("00:00:00")){
           this.txtSalidaInter.setText("");
       this.txtEntradaInter.setText("");
       }
       else{
       this.txtSalidaInter.setText(this.noNull(salidaInter));
       this.txtEntradaInter.setText(this.noNull(entradaInter));
       }
       
       if(dias.equals("LUNES A VIERNES")){
           this.comboDias.setSelectedIndex(0);
       }
       else if(dias.equals("SABADO")){
            this.comboDias.setSelectedIndex(1);
       }
       else if(dias.equals("DOMINGO")){
            this.comboDias.setSelectedIndex(2);
       }
       this.comboDias.repaint();
       this.txtSalida.setText(Salida);
   
        this.txtEntrada.setEditable(true);
        this.txtEntradaInter.setEditable(true);
        this.txtSalida.setEditable(true);
        this.txtSalidaInter.setEditable(true);
        this.comboDias.setEnabled(true);
        this.lblMsg.setText("");
        this.lblNuevo.setText("");
       }
        
    }
    
    private String noNull(String salidaInter) {
     String res="";
     if(!salidaInter.equals("null")){
          res=salidaInter;
     }
     return res;
     }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonIcon btnNuevo;
    private org.edisoncor.gui.button.ButtonIcon buttonAqua2;
    private org.edisoncor.gui.button.ButtonIcon buttonAqua4;
    private javax.swing.JComboBox comboDias;
    private javax.swing.JComboBox comboHorario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblNuevo;
    private javax.swing.JPanel pnlNuevoHorario;
    private org.edisoncor.gui.textField.TextFieldRound txtEntrada;
    private org.edisoncor.gui.textField.TextFieldRound txtEntradaInter;
    private org.edisoncor.gui.textField.TextFieldRound txtSalida;
    private org.edisoncor.gui.textField.TextFieldRound txtSalidaInter;
    // End of variables declaration//GEN-END:variables
}
