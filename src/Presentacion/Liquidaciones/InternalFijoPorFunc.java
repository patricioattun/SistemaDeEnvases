
package Presentacion.Liquidaciones;

import Dominio.Codigo;
import Dominio.Funcionario;
import Dominio.Ingreso;
import Logica.LogCodigo;
import Logica.LogFuncionario;
import Persistencia.BDExcepcion;
import Presentacion.frmPrin;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.edisoncor.gui.button.ButtonIcon;
import org.edisoncor.gui.textField.TextFieldRound;

public class InternalFijoPorFunc extends javax.swing.JInternalFrame {
    private InternalListadoFuncFiltro listadoFunc;
    private InternalModCodFijo internalIng;
    private LogFuncionario log;
    private LogCodigo logs;
    Codigo cod=null;
    private static InternalFijoPorFunc instancia=null;
    private Funcionario f;
    DefaultTableModel tmMov=null;
    private Ingreso ingres=null;
    public InternalFijoPorFunc() throws ClassNotFoundException, SQLException {
        initComponents();
        log=new LogFuncionario();
        logs=new LogCodigo();
        this.cargaCodigos();
        this.habilita(false);
          tmMov = (DefaultTableModel) tabla.getModel();
           tabla.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent e) {
                if(e.getClickCount()==1){
                    try {
                        cargarMovimiento(e);
                    } catch (ParseException ex) {
                        Logger.getLogger(InternalIngresoPorFunc.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                
         }

       });
    }

     private void cargarMovimiento(MouseEvent e) throws ParseException {
     Integer m=this.tabla.rowAtPoint(e.getPoint());
     this.ingres=new Ingreso();
     ingres.setCodFunc(f.getCodFunc());
     Codigo c=new Codigo();
     c.setCod(Integer.valueOf(String.valueOf(tmMov.getValueAt(m, 0))));
     c.setDescripcion(String.valueOf(tmMov.getValueAt(m, 1)));
     ingres.setCantidad(Double.valueOf(String.valueOf(tmMov.getValueAt(m, 2))));
     ingres.setCodMov(c);
    }
     
    public static InternalFijoPorFunc instancia() throws ClassNotFoundException, SQLException
        {    
         if (instancia== null)
         {
            instancia = new InternalFijoPorFunc();
         }
         return instancia;
      
        }

    public TextFieldRound getTxtNumFunc() {
        return txtNumFunc;
    }

    public void setTxtNumFunc(TextFieldRound txtNumFunc) {
        this.txtNumFunc = txtNumFunc;
    }

    public ButtonIcon getBtnBuscar() {
        return btnBuscar;
    }

    public void setBtnBuscar(ButtonIcon btnBuscar) {
        this.btnBuscar = btnBuscar;
    }

    public Codigo getCod() {
        return cod;
    }

    public void setCod(Codigo cod) {
        this.cod = cod;
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel2 = new javax.swing.JLabel();
        txtNumFunc = new org.edisoncor.gui.textField.TextFieldRound();
        btnBuscar = new org.edisoncor.gui.button.ButtonIcon();
        txtNombre = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel3 = new javax.swing.JLabel();
        txtVal = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel7 = new javax.swing.JLabel();
        comboCodigos = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        jMenuItem1.setText("Eliminar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Modificar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setClosable(true);
        setIconifiable(true);
        setTitle("Carga de Códigos Fijos por Funcionario");
        setPreferredSize(new java.awt.Dimension(750, 577));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Nro. Funcionario ");

        txtNumFunc.setBackground(new java.awt.Color(102, 153, 255));
        txtNumFunc.setForeground(new java.awt.Color(255, 255, 255));
        txtNumFunc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumFunc.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNumFunc.setSelectionColor(new java.awt.Color(102, 102, 102));
        txtNumFunc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumFuncKeyTyped(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(102, 153, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnBuscar.setText("buttonIcon1");
        btnBuscar.setToolTipText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtNombre.setEditable(false);
        txtNombre.setBackground(new java.awt.Color(102, 102, 102));
        txtNombre.setForeground(new java.awt.Color(255, 255, 255));
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNombre.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNombre.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Nombre de Funcionario");

        txtVal.setBackground(new java.awt.Color(102, 153, 255));
        txtVal.setForeground(new java.awt.Color(255, 255, 255));
        txtVal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtVal.setCaretColor(new java.awt.Color(255, 255, 255));
        txtVal.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtVal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setText("Valor");

        comboCodigos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCodigosItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Código");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Valor", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNumFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtVal, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboCodigos, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNumFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCodigos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtVal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumFuncKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumFuncKeyTyped
        this.txtVal.setText("");
        this.txtNombre.setText("");
        this.comboCodigos.setSelectedIndex(0);
        f=null;
        this.cod=null;
        this.habilita(false); 
        this.LimpiarTabla();
        int k = (int) evt.getKeyChar();

        if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==46||k==45||k==8||k==47||k==42||k==43)  {

            evt.consume();
        }
        if(k==10){
            this.btnBuscar.doClick();
        }
        if(this.txtNumFunc.getText().length()>3){
             evt.consume();
        }
        if(evt.getKeyChar()==43){

            try {
                listadoFunc=InternalListadoFuncFiltro.instancia(log,4);
                frmPrin prin=frmPrin.instancia();
                if (!listadoFunc.isVisible()) {
                    prin.getDesktop().add(listadoFunc);
                    listadoFunc.setLocation((prin.getDesktop().getWidth()/70)-(listadoFunc.getWidth()/70),(prin.getDesktop().getHeight()/70) - listadoFunc.getHeight()/70);
                    listadoFunc.setVisible(true);
                    listadoFunc.repaint();
                    listadoFunc.revalidate();
                }
                else{
                    listadoFunc.requestFocus();
                    try {
                        listadoFunc.setSelected(true);
                        listadoFunc.setVisible(true);
                        listadoFunc.repaint();
                        listadoFunc.revalidate();

                    } catch (PropertyVetoException ex) {
                        //lblMensaje.setText(ex.getMessage());
                    }
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InternalFijoPorCod.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InternalFijoPorCod.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtNumFuncKeyTyped

     private void cargaCodigos() throws SQLException, ClassNotFoundException {
         ArrayList<Codigo> c=this.logs.cargaComboCodigoFijo();
      this.comboCodigos.addItem("SELECCIONE CÓDIGO");  
      for(int i=0; i<c.size();i++){
          this.comboCodigos.addItem(c.get(i));
          this.comboCodigos.setSelectedIndex(0);
      }
    }
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String numFunc=this.txtNumFunc.getText();
        this.LimpiarTabla();
        if(this.esNum(numFunc)){
            
            try {
                f = this.log.funcParcial(numFunc);
                if(f!=null){
                    this.txtNombre.setText(f.getNomCompletoApe());
                    this.comboCodigos.requestFocus();
                    this.habilita(true);
                    this.cargaTabla();
                }
                else{
                    this.txtNumFunc.requestFocus();
                    this.txtNombre.setText("El funcionario no existe");
                    this.txtNumFunc.selectAll();
                    f=null;
                    this.LimpiarTabla();
                    
                }
            } catch (BDExcepcion ex) {
                Logger.getLogger(InternalFijoPorFunc.class.getName()).log(Level.SEVERE, null, ex);
            }

            

        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private Boolean esNum(String num){
        Boolean es=true;
        Integer i=0;
        if(num.equals("")){
            es=false;
        }
        while(i<num.length() && es){
            if(!Character.isDigit(num.charAt(i))){
                es=false;
            }
            i++;
        }
        return es;
    }
    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtValKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValKeyTyped
        this.txtVal.requestFocus();
        Date fecha=new Date();
        int k = (int) evt.getKeyChar();
        char c=evt.getKeyChar();
        if(k!=46){
            if(!Character.isDigit(c)){
                evt.consume();
            }
        }
        if(cod!=null){
            if(!cod.getCod().equals(44)){
                evt.consume();
                this.txtVal.setText("1");
            }
        }
        if(k==10){
            try {
                if(this.logs.bloqueoContaduria()==0){
                    if(cod!=null){
                        
                        try {
                            String str=this.txtVal.getText().trim();
                            if(!this.logs.estaEnCodigosFijos(f,cod)&&!str.equals("0")&&!str.equals("")){
                                Ingreso ing=new Ingreso();
                                ing.setCodMov(cod);
                                ing.setFecha(fecha);
                                ing.setFunc(f);
                                if(!cod.getCod().equals(44)){
                                    ing.setCantidad(Double.parseDouble("1"));
                                }
                                else{
                                    ing.setCantidad(Double.parseDouble(str));
                                }
                                this.txtVal.requestFocus();
                                
                                if(this.logs.insertaEnCodigosFijos(ing)){
                                    this.LimpiarTabla();
                                    this.cargaTabla();
                                    this.txtVal.setText("");
                                    this.comboCodigos.setSelectedIndex(0);
                                    this.comboCodigos.requestFocus();
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(this, "Este código ya fue ingresado");
                                this.comboCodigos.setSelectedIndex(0);
                                this.comboCodigos.requestFocus();
                                this.cod=null;
                                this.txtVal.setText("");
                                
                            }
                        } catch (BDExcepcion ex) {
                            JOptionPane.showMessageDialog(null, "Ha ocurrido un problema. Reinicie el programa y si persiste consulte a Desarrollo.");
                        }
                        
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "En estos momentos no puede ingresar ni modificar ningún dato.");
                }
            } catch (BDExcepcion ex) {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
            }
        }
    }//GEN-LAST:event_txtValKeyTyped

     public void LimpiarTabla() {
        DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
        //primero limpio todas las filas
        for (int i = 0; i < tabla.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
      }
      private void habilita(boolean h){
        this.txtVal.setEditable(h);
        this.comboCodigos.setEnabled(h);
    }
    private void comboCodigosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCodigosItemStateChanged
        cod=null;
        this.txtVal.setText("");
        if(this.comboCodigos.getSelectedIndex()!=0){
            cod=(Codigo) this.comboCodigos.getSelectedItem();
            if(cod!=null){
                if(!cod.getCod().equals(44)){
                        this.txtVal.setText("1");
                        
                    }
                    else{
                        this.txtVal.setText("");
                        
                    }
                habilita(true);
                this.txtVal.requestFocus();
            }
        }
     this.txtVal.requestFocus();
    }//GEN-LAST:event_comboCodigosItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            if(this.logs.bloqueoContaduria()==0){
                if(ingres!=null){
                    int respuesta=JOptionPane.showConfirmDialog(this, "Seguro desea eliminar esta línea?");
                    //si es 0,no es 1 cancela es 2
                    if(respuesta==0){
                        
                        try {
                            if(this.logs.borrarCodigoEnPersCodFijo(ingres)){
                                this.LimpiarTabla();
                                this.cargaTabla();
                            }
                        } catch (BDExcepcion ex) {
                            JOptionPane.showMessageDialog(null, "Ha ocurrido un problema. Reinicie el programa y si persiste consulte a Desarrollo.");
                        }
                        
                        
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "En estos momentos no puede ingresar ni modificar ningún dato.");
            }
        } catch (BDExcepcion ex) {
           JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        instancia=null;
    }//GEN-LAST:event_formInternalFrameClosed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            if(this.logs.bloqueoContaduria()==0){
                if(this.ingres!=null){
                    if(ingres.getCodMov().getCod()==44){
                        try {
                            this.internalIng=InternalModCodFijo.instancia(logs,ingres,1);
                            frmPrin prin=frmPrin.instancia();
                            if (!internalIng.isVisible()) {
                                prin.getDesktop().add(internalIng);
                                internalIng.setLocation((prin.getDesktop().getWidth()/2)-(internalIng.getWidth()/2),(prin.getDesktop().getHeight()/2) - internalIng.getHeight()/2);
                                internalIng.setVisible(true);
                                
                                internalIng.repaint();
                                internalIng.revalidate();
                                
                            }
                            else{
                                internalIng.setSelected(true);
                                internalIng.requestFocus();
                                internalIng.setVisible(true);
                                internalIng.repaint();
                                internalIng.revalidate();
                                
                            }
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(InternalIngresoPorFunc.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(InternalIngresoPorFunc.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (PropertyVetoException ex) {
                            Logger.getLogger(InternalIngresoPorFunc.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else{
                        JOptionPane.showInternalMessageDialog(this, "Este código no es modificable");
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "En estos momentos no puede ingresar ni modificar ningún dato.");
            }
        } catch (BDExcepcion ex) {
           JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

     private void cargaTabla() throws BDExcepcion{
         this.Alinear_Grillas();
         ArrayList<Ingreso> lista=this.logs.cargaMovimientosFijoFunc(f.getCodFunc());
         DefaultTableModel modelo = (DefaultTableModel)tabla.getModel();
         Object[] filas=new Object[modelo.getColumnCount()];
         int cuenta=0; 
         int posicion=0;
         for(Ingreso i:lista){
                            if(cod!=null){
                                if(cod.getCod().equals(i.getCodMov().getCod())){
                                    posicion=cuenta;
                                }
                            }
                            filas[0]=i.getCodMov().getCod();
                            filas[1]=i.getCodMov().getDescripcion();
                            filas[2]=i.getCantidad(); 
                            filas[3]=this.formateo(i.getFecha());
                      
                           cuenta++;
                           modelo.addRow(filas);
                           
                }
        JTableHeader th; 
        th = tabla.getTableHeader(); 
        Font fuente = new Font("Ebrima", Font.BOLD, 12); 
        th.setBackground(Color.LIGHT_GRAY);
        th.setFont(fuente);  
        tabla.setColumnSelectionAllowed(false);
        tabla.setRowSelectionAllowed(true);
        tabla.changeSelection(posicion, 0, false, false);
    }

     private String formateo(Date hoy){
      String retorno="";
      if(hoy!=null){   
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy");
         retorno=formateador.format(hoy);
      }
      return retorno;
     } 
     
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonIcon btnBuscar;
    private javax.swing.JComboBox comboCodigos;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private org.edisoncor.gui.textField.TextFieldRound txtNombre;
    private org.edisoncor.gui.textField.TextFieldRound txtNumFunc;
    private org.edisoncor.gui.textField.TextFieldRound txtVal;
    // End of variables declaration//GEN-END:variables
  private void Alinear_Grillas(){
        DefaultTableCellRenderer modelo = new DefaultTableCellRenderer();
        modelo.setHorizontalAlignment(SwingConstants.RIGHT);
        this.tabla.getColumnModel().getColumn(0).setCellRenderer(modelo); 
        this.tabla.getColumnModel().getColumn(2).setCellRenderer(modelo); 
        this.tabla.getColumnModel().getColumn(3).setCellRenderer(modelo);    

    }
}
