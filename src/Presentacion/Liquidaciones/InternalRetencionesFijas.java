
package Presentacion.Liquidaciones;

import Dominio.Codigo;
import Dominio.Funcionario;
import Dominio.Ingreso;
import Dominio.Retencion;
import Logica.LogCodigo;
import Logica.LogFuncionario;
import Persistencia.BDExcepcion;
import Presentacion.frmPrin;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.edisoncor.gui.button.ButtonIcon;
import org.edisoncor.gui.textField.TextFieldRound;

public class InternalRetencionesFijas extends javax.swing.JInternalFrame {

  private InternalListadoFuncFiltro listadoFunc;
  private LogFuncionario log;
  private LogCodigo logs;
  private static InternalRetencionesFijas instancia=null;
  Codigo cod=null;
  private Funcionario f = null;
  DefaultTableModel tmMov=null; 
  private Retencion ret;
  private Retencion retMod;
  private Double sumaImpo=0.0;
  private Double sumaPorcen=0.0;

  public InternalRetencionesFijas() throws ClassNotFoundException, SQLException {
        initComponents();
        log=new LogFuncionario();
        logs=new LogCodigo();
        this.cargaCodigos();
        
        tmMov = (DefaultTableModel) tabla.getModel();
           tabla.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent e) {
                if(e.getClickCount()==1){
                    try {
                        cargarMovimiento(e);
                    } catch (ParseException ex) {
                        Logger.getLogger(InternalIngresoPorFunc.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                
         }

       });
    }
    
    private void cargarMovimiento(MouseEvent e) throws ParseException {
     Integer m=this.tabla.rowAtPoint(e.getPoint());
     m=this.tabla.getSelectedRow();
     this.ret=new Retencion();
     Funcionario fu = new Funcionario();
     Codigo c = new Codigo();
     fu.setCodFunc(Integer.valueOf(String.valueOf(tmMov.getValueAt(m, 0))));
     fu.setNombre1(String.valueOf(tmMov.getValueAt(m, 1)));
     c.setCod(Integer.valueOf(String.valueOf(tmMov.getValueAt(m, 2))));
     c.setDescripcion(String.valueOf(tmMov.getValueAt(m, 3)).replace(",", ""));
     String importe=String.valueOf(tmMov.getValueAt(m,4)).replace(",", "");
     String porcentaje=String.valueOf(tmMov.getValueAt(m,5));
     ret.setImporte(Double.valueOf(importe));
     ret.setPorcentaje(Double.valueOf(porcentaje));
     ret.setTipo(Integer.valueOf(String.valueOf(tmMov.getValueAt(m, 6))));
     ret.setSueldo(Integer.valueOf(String.valueOf(tmMov.getValueAt(m, 7))));
     ret.setOtros(Integer.valueOf(String.valueOf(tmMov.getValueAt(m, 8))));
     if(tmMov.getValueAt(m, 9).equals(true)){
         ret.setActiva(1);
     }
     else{
         ret.setActiva(0);
     }
     ret.setCod(c);
     ret.setFunc(fu);
    }

    public static InternalRetencionesFijas instancia() throws ClassNotFoundException, SQLException
    {    
         if (instancia== null)
         {
            instancia = new InternalRetencionesFijas();
         }
         return instancia;
      
    }

    public Retencion getRetMod() {
        return retMod;
    }

    public void setRetMod(Retencion retMod) {
        this.retMod = retMod;
    }
    
    public ButtonIcon getBtnListar() {
        return btnListar;
    }

    public void setBtnListar(ButtonIcon btnListar) {
        this.btnListar = btnListar;
    }

    
    
    public TextFieldRound getTxtNumFunc() {
        return txtNumFunc;
    }

    public void setTxtNumFunc(TextFieldRound txtNumFunc) {
        this.txtNumFunc = txtNumFunc;
    }

    public TextFieldRound getTxtNumFunc2() {
        return txtValor;
    }

    public void setTxtNumFunc2(TextFieldRound txtNumFunc2) {
        this.txtValor = txtNumFunc2;
    }

    public LogCodigo getLogs() {
        return logs;
    }

    public void setLogs(LogCodigo logs) {
        this.logs = logs;
    }

    public Retencion getRet() {
        return ret;
    }

    public void setRet(Retencion ret) {
        this.ret = ret;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        comboListar = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtNumFunc = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel3 = new javax.swing.JLabel();
        btnListar = new org.edisoncor.gui.button.ButtonIcon();
        jLabel4 = new javax.swing.JLabel();
        radioImporte = new javax.swing.JRadioButton();
        radioPorcentaje = new javax.swing.JRadioButton();
        radioTipoTodo = new javax.swing.JRadioButton();
        radioAplicaTodo = new javax.swing.JRadioButton();
        radioSueldo = new javax.swing.JRadioButton();
        radioAguin = new javax.swing.JRadioButton();
        radioEstadoTodo = new javax.swing.JRadioButton();
        radioActiva = new javax.swing.JRadioButton();
        radioInactiva = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        comboNuevo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNumFuncNuevo = new org.edisoncor.gui.textField.TextFieldRound();
        checkAgui = new javax.swing.JCheckBox();
        checkSueldo = new javax.swing.JCheckBox();
        txtNombre = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel7 = new javax.swing.JLabel();
        radioPorcentajeNuevo = new javax.swing.JRadioButton();
        radioImporteNuevo = new javax.swing.JRadioButton();
        txtValor = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel8 = new javax.swing.JLabel();
        btnListar1 = new org.edisoncor.gui.button.ButtonIcon();
        jLabel9 = new javax.swing.JLabel();
        lblMsj = new javax.swing.JLabel();
        txtImporte = new org.edisoncor.gui.textField.TextFieldRound();
        jLabel10 = new javax.swing.JLabel();
        txtPorcen = new org.edisoncor.gui.textField.TextFieldRound();

        jMenuItem1.setText("Modificar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Inactivar/Activar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setClosable(true);
        setIconifiable(true);
        setTitle("Carga de Retenciones Fijas");
        setPreferredSize(new java.awt.Dimension(870, 650));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod Func", "Nombre", "Cod Ret", "Descripci√≥n", "Importe", "Porcentaje", "Tipo", "Sueldo", "Otros", "Activa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setMinWidth(70);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(70);
            tabla.getColumnModel().getColumn(0).setMaxWidth(70);
            tabla.getColumnModel().getColumn(1).setMinWidth(250);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(250);
            tabla.getColumnModel().getColumn(1).setMaxWidth(250);
            tabla.getColumnModel().getColumn(2).setMinWidth(70);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(70);
            tabla.getColumnModel().getColumn(2).setMaxWidth(70);
            tabla.getColumnModel().getColumn(3).setMinWidth(200);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(3).setMaxWidth(200);
            tabla.getColumnModel().getColumn(6).setMinWidth(0);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(0);
            tabla.getColumnModel().getColumn(6).setMaxWidth(0);
            tabla.getColumnModel().getColumn(7).setMinWidth(0);
            tabla.getColumnModel().getColumn(7).setPreferredWidth(0);
            tabla.getColumnModel().getColumn(7).setMaxWidth(0);
            tabla.getColumnModel().getColumn(8).setMinWidth(0);
            tabla.getColumnModel().getColumn(8).setPreferredWidth(0);
            tabla.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Listar"));

        comboListar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboListarItemStateChanged(evt);
            }
        });
        comboListar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboListarMouseClicked(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Nro. Funcionario ");

        txtNumFunc.setBackground(new java.awt.Color(102, 153, 255));
        txtNumFunc.setForeground(new java.awt.Color(255, 255, 255));
        txtNumFunc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumFunc.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNumFunc.setSelectionColor(new java.awt.Color(102, 102, 102));
        txtNumFunc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumFuncKeyTyped(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("C√≥digo");
        jLabel3.setToolTipText("");

        btnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/tabla.png"))); // NOI18N
        btnListar.setText("buttonIcon1");
        btnListar.setToolTipText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Listar");

        buttonGroup1.add(radioImporte);
        radioImporte.setText("Importe");
        radioImporte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioImporteItemStateChanged(evt);
            }
        });

        buttonGroup1.add(radioPorcentaje);
        radioPorcentaje.setText("Porcentaje");
        radioPorcentaje.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioPorcentajeItemStateChanged(evt);
            }
        });

        buttonGroup1.add(radioTipoTodo);
        radioTipoTodo.setSelected(true);
        radioTipoTodo.setText("Todo");
        radioTipoTodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioTipoTodoItemStateChanged(evt);
            }
        });

        buttonGroup3.add(radioAplicaTodo);
        radioAplicaTodo.setSelected(true);
        radioAplicaTodo.setText("Todo");
        radioAplicaTodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioAplicaTodoItemStateChanged(evt);
            }
        });

        buttonGroup3.add(radioSueldo);
        radioSueldo.setText("Sueldo");
        radioSueldo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioSueldoItemStateChanged(evt);
            }
        });

        buttonGroup3.add(radioAguin);
        radioAguin.setText("Aguinaldo y Vacacional");
        radioAguin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioAguinItemStateChanged(evt);
            }
        });

        buttonGroup4.add(radioEstadoTodo);
        radioEstadoTodo.setSelected(true);
        radioEstadoTodo.setText("Todo");
        radioEstadoTodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioEstadoTodoItemStateChanged(evt);
            }
        });

        buttonGroup4.add(radioActiva);
        radioActiva.setText("Activa");
        radioActiva.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioActivaItemStateChanged(evt);
            }
        });

        buttonGroup4.add(radioInactiva);
        radioInactiva.setText("Inactiva");
        radioInactiva.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioInactivaItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboListar, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNumFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(radioTipoTodo)
                                            .addGap(18, 18, 18)
                                            .addComponent(radioPorcentaje))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(radioEstadoTodo)
                                            .addGap(18, 18, 18)
                                            .addComponent(radioActiva))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(radioAplicaTodo)
                                            .addGap(18, 18, 18)
                                            .addComponent(radioSueldo)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(radioAguin)
                                        .addComponent(radioImporte)
                                        .addComponent(radioInactiva))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(155, 155, 155)
                                .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboListar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNumFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioImporte)
                    .addComponent(radioPorcentaje)
                    .addComponent(radioTipoTodo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioAplicaTodo)
                    .addComponent(radioSueldo)
                    .addComponent(radioAguin))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioEstadoTodo)
                            .addComponent(radioActiva)
                            .addComponent(radioInactiva))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Nuevo Ingreso"));

        comboNuevo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboNuevoMouseClicked(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("C√≥digo");
        jLabel5.setToolTipText("");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Nro. Funcionario ");

        txtNumFuncNuevo.setBackground(new java.awt.Color(102, 153, 255));
        txtNumFuncNuevo.setForeground(new java.awt.Color(255, 255, 255));
        txtNumFuncNuevo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumFuncNuevo.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNumFuncNuevo.setSelectionColor(new java.awt.Color(102, 102, 102));
        txtNumFuncNuevo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumFuncNuevoFocusLost(evt);
            }
        });
        txtNumFuncNuevo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumFuncNuevoKeyTyped(evt);
            }
        });

        checkAgui.setText("Aguinaldo y Vacacional");

        checkSueldo.setText("Sueldo");

        txtNombre.setEditable(false);
        txtNombre.setBackground(new java.awt.Color(102, 102, 102));
        txtNombre.setForeground(new java.awt.Color(255, 255, 255));
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNombre.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNombre.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        txtNombre.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Nombre de Funcionario");

        buttonGroup2.add(radioPorcentajeNuevo);
        radioPorcentajeNuevo.setSelected(true);
        radioPorcentajeNuevo.setText("Porcentaje");

        buttonGroup2.add(radioImporteNuevo);
        radioImporteNuevo.setText("Importe");

        txtValor.setBackground(new java.awt.Color(102, 153, 255));
        txtValor.setForeground(new java.awt.Color(255, 255, 255));
        txtValor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtValor.setCaretColor(new java.awt.Color(255, 255, 255));
        txtValor.setSelectionColor(new java.awt.Color(102, 102, 102));
        txtValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValorKeyTyped(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Valor");

        btnListar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/new.png"))); // NOI18N
        btnListar1.setText("buttonIcon1");
        btnListar1.setToolTipText("Insertar");
        btnListar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListar1ActionPerformed(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Nuevo");

        lblMsj.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboNuevo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                            .addComponent(txtNumFuncNuevo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(checkSueldo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkAgui)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                        .addComponent(radioPorcentajeNuevo))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(lblMsj, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioImporteNuevo)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnListar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(3, 3, 3)
                        .addComponent(comboNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(txtNumFuncNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkAgui)
                    .addComponent(radioPorcentajeNuevo)
                    .addComponent(radioImporteNuevo)
                    .addComponent(checkSueldo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnListar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMsj, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        txtImporte.setEditable(false);
        txtImporte.setBackground(new java.awt.Color(102, 102, 102));
        txtImporte.setForeground(new java.awt.Color(255, 255, 255));
        txtImporte.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtImporte.setCaretColor(new java.awt.Color(255, 255, 255));
        txtImporte.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtImporte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtImporteKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setText("Totales:");

        txtPorcen.setEditable(false);
        txtPorcen.setBackground(new java.awt.Color(102, 102, 102));
        txtPorcen.setForeground(new java.awt.Color(255, 255, 255));
        txtPorcen.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPorcen.setCaretColor(new java.awt.Color(255, 255, 255));
        txtPorcen.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtPorcen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPorcenKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtPorcen, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPorcen, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(94, 94, 94))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumFuncKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumFuncKeyTyped
        this.LimpiarTabla();
        int k = (int) evt.getKeyChar();

        if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==46||k==45||k==8||k==47||k==42||k==43)  {
            evt.consume();
        }
         if(this.txtNumFunc.getText().length()>3){
             evt.consume();
        }
        
        if(k==10){
            this.btnListar.doClick();
        }
        if(k==43){

            try {
                listadoFunc=InternalListadoFuncFiltro.instancia(log,5);
                frmPrin prin=frmPrin.instancia();
                if (!listadoFunc.isVisible()) {
                    prin.getDesktop().add(listadoFunc);
                    listadoFunc.setLocation((prin.getDesktop().getWidth()/70)-(listadoFunc.getWidth()/70),(prin.getDesktop().getHeight()/70) - listadoFunc.getHeight()/70);
                    listadoFunc.setVisible(true);
                    listadoFunc.repaint();
                    listadoFunc.revalidate();
                }
                else{
                    listadoFunc.requestFocus();
                    try {
                        listadoFunc.setSelected(true);
                        listadoFunc.setVisible(true);
                        listadoFunc.repaint();
                        listadoFunc.revalidate();

                    } catch (PropertyVetoException ex) {
                        //lblMensaje.setText(ex.getMessage());
                    }
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InternalFijoPorCod.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InternalFijoPorCod.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtNumFuncKeyTyped

    private void cargaCodigos() throws SQLException, ClassNotFoundException {
      ArrayList<Codigo> c=this.logs.cargaComboRetencionesFijo();
      this.comboListar.addItem("TODOS"); 
      this.comboNuevo.addItem("SELECCIONE C√ìDIGO");
      for(int i=0; i<c.size();i++){
          this.comboListar.addItem(c.get(i));
          this.comboNuevo.addItem(c.get(i));
          this.comboListar.setSelectedIndex(0);
          this.comboNuevo.setSelectedIndex(0);
          
      }
    }
    public void LimpiarTabla() {
        this.sumaImpo=0.0;
        this.sumaPorcen=0.0;
        DefaultTableModel modelo=(DefaultTableModel) tabla.getModel();
        //primero limpio todas las filas
        for (int i = 0; i < tabla.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
      }
    private void txtNumFuncNuevoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumFuncNuevoKeyTyped
        this.txtNombre.setText("");
        this.txtValor.setText("");
        this.lblMsj.setText("");
        int k = (int) evt.getKeyChar();

        if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==46||k==45||k==8||k==47||k==42||k==43)  {
            evt.consume();
        }
        if(k==10){
            this.txtValor.requestFocus();
        }
         if(this.txtNumFuncNuevo.getText().length()>3){
             evt.consume();
        }
    }//GEN-LAST:event_txtNumFuncNuevoKeyTyped

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtValorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorKeyTyped
        int k = (int) evt.getKeyChar();
        String valor = this.txtValor.getText();
        this.lblMsj.setText("");
        if(!valor.contains(".")){ 
            if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==32||k==45||k==8||k==47||k==42||k==43)  {
                evt.consume();
            }
        }
        else{
            if (k >= 97 && k <= 122 || k >= 65 && k <= 90 || k==46 || k==32||k==45||k==8||k==47||k==42||k==43)  {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtValorKeyTyped

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
      try {
          this.LimpiarTabla();
          
          if(this.comboListar.getSelectedIndex()!=0){
              cod=(Codigo) this.comboListar.getSelectedItem();
          }
          else{
              cod=null;
          }
          int activa=2;
          int aplica=0;
          int tipo=0;
          String codFunc=this.txtNumFunc.getText();
          Funcionario f=null;
          if(this.radioImporte.isSelected()){
              tipo=2;
          }
          else if(this.radioPorcentaje.isSelected()){
              tipo=1;
          }
          
          if(this.radioActiva.isSelected()){
              activa=1;
          }
          if(this.radioInactiva.isSelected()){
              activa=0;
          }
          if(this.radioAguin.isSelected()){
              aplica=2;
          }
          if(this.radioSueldo.isSelected()){
              aplica=1;
          }
          
          if(this.esNum(codFunc)){
              f=this.log.funcParcial(codFunc);
                
          }
          this.cargarTabla(activa,f,cod,aplica,tipo);
      } catch (BDExcepcion ex) {
         JOptionPane.showMessageDialog(null, "Ha ocurrido un problema. Reinicie el programa y si persiste consulte a Desarrollo.");
      }
      
    }//GEN-LAST:event_btnListarActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        instancia = null;
    }//GEN-LAST:event_formInternalFrameClosed

    private void btnListar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListar1ActionPerformed
      try {
          if(this.logs.bloqueoContaduria()==0){
          Codigo c=null;
          if(this.comboNuevo.getSelectedIndex()!=0){
              c =(Codigo) this.comboNuevo.getSelectedItem();
          }
          
          
          String numFunc = this.txtNumFuncNuevo.getText();
          String valor = this.txtValor.getText();
          int sueldo = 0;
          int agui = 0;
          int tipo = 1;
          if(this.checkAgui.isSelected()){
              agui = 1;
          }
          if(this.checkSueldo.isSelected()){
              sueldo = 1;
          }
          if(this.radioImporteNuevo.isSelected()){
              tipo = 0;
          }
          if(!this.logs.estaEnRetFijas(f, c)){
              if(this.esNumDouble(valor)){
                  if(f!=null){
                      if(sueldo==1||agui==1){
                          if(c!=null){
                              try {
                                  if(this.logs.ingresarRetencionFija(f,c,sueldo,agui,tipo,valor)){
                                      this.comboNuevo.setSelectedIndex(0);
                                      this.txtNombre.setText("");
                                      this.txtValor.setText("");
                                      this.txtNumFuncNuevo.setText("");
                                      this.radioImporteNuevo.setSelected(false);
                                      this.radioPorcentajeNuevo.setSelected(true);
                                      this.checkAgui.setSelected(false);
                                      this.checkSueldo.setSelected(false);
                                      this.comboListar.setSelectedItem((Codigo)c);
                                      this.txtNumFunc.setText(f.getCodFunc().toString());
                                      this.radioAplicaTodo.setSelected(true);
                                      this.radioEstadoTodo.setSelected(true);
                                      this.radioTipoTodo.setSelected(true);
                                      this.btnListar.doClick();
                                      this.lblMsj.setText("");
                                  }
                              } catch (ClassNotFoundException ex) {
                                  Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
                              } catch (SQLException ex) {
                                  Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
                              }
                          }
                          else{
                              this.lblMsj.setText("Seleccione un c√≥digo");
                          }
                      }
                      else{
                          this.lblMsj.setText("Seleccione almenos una opci√≥n para aplicar");
                      }
                  }
                  else{
                     this.lblMsj.setText("Ingrese un funcionario existente"); 
                  }
              }
              else{
                  this.lblMsj.setText("Ingrese solo n√∫meros");
                  }
          }
          else{
              this.lblMsj.setText("Ya esta ingresada esta retenci√≥n");
              }
          }
          else{
              JOptionPane.showMessageDialog(null, "En estos momentos no puede ingresar ni modificar ning√∫n dato.");
          }
      } catch (ClassNotFoundException ex) {
           JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
      } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
      } catch (BDExcepcion ex) {
          JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
      }
      
    }//GEN-LAST:event_btnListar1ActionPerformed

    private void txtNumFuncNuevoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumFuncNuevoFocusLost
        String num = this.txtNumFuncNuevo.getText();
        if(this.esNum(num)){
            try {
                f = this.log.funcBasico(num);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
            }
             Codigo c=null;
                    if(this.comboNuevo.getSelectedIndex()!=0){
                        c =(Codigo) this.comboNuevo.getSelectedItem();
                    }
            if(f!=null){
                this.txtNombre.setText(f.getNomCompletoApe());
                  if(c!=null){
                    try {
                        if(this.logs.estaEnRetFijas(f, c)){
                              this.lblMsj.setText("Ya esta ingresada esta retenci√≥n");
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
            }
            else{
                this.txtNombre.setText("El funcionario no existe");
                this.txtNumFuncNuevo.selectAll();
                //this.txtNumFuncNuevo.requestFocus();
                f=null;
            }
        }
        else{
            this.txtNombre.setText("Ingrese solo n√∫meros");
            this.txtNumFuncNuevo.selectAll();
            //this.txtNumFuncNuevo.requestFocus();
            f=null;
        }
    }//GEN-LAST:event_txtNumFuncNuevoFocusLost
    
 // Inactivar
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
      try {
          if(this.logs.bloqueoContaduria()==0){
              if(ret!=null){
                  
                  int respuesta=JOptionPane.showConfirmDialog(this, "Seguro desea inactivar esta retenci√≥n?");
                  //si es 0,no es 1 cancela es 2
                  if(respuesta==0){
                      try {
                          if(this.logs.eliminarRetencionFija(ret)){
                              this.btnListar.doClick();
                              
                          }
                      } catch (SQLException ex) {
                          Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
                      } catch (ClassNotFoundException ex) {
                          Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
                      }
                  }
              }
          }
          else{
              JOptionPane.showMessageDialog(null, "En estos momentos no puede ingresar ni modificar ning√∫n dato.");
          }
      } catch (BDExcepcion ex) {
         JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
      }
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    //Modificar
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
      try {
          if(this.logs.bloqueoContaduria()==0){
              try {
                  //        if(this.ret!=null){
//            try {
//                internalMod=InternalModRetencion.instancia(ret,this,logs);
//                frmPrin prin=frmPrin.instancia();
//                if (!internalMod.isVisible()) {
//                    prin.getDesktop().add(internalMod);
//                    internalMod.setLocation((prin.getDesktop().getWidth()/70)-(internalMod.getWidth()/70),(prin.getDesktop().getHeight()/70) - internalMod.getHeight()/70);
//                    internalMod.setVisible(true);
//                    internalMod.repaint();
//                    internalMod.revalidate();
//                }
//                else{
//                    internalMod.requestFocus();
//                    try {
//                        internalMod.setSelected(true);
//                        internalMod.setVisible(true);
//                        internalMod.repaint();
//                        internalMod.revalidate();
//
//                    } catch (PropertyVetoException ex) {
//                        //lblMensaje.setText(ex.getMessage());
//                    }
//                }
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (SQLException ex) {
//                Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
            if(ret!=null){
                ModalModRetencion modal=new ModalModRetencion(null, closable);
                modal.setVisible(true);
            }
            ret=null;
              } catch (ClassNotFoundException ex) {
                  Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
              } catch (SQLException ex) {
                  Logger.getLogger(InternalRetencionesFijas.class.getName()).log(Level.SEVERE, null, ex);
              }
          }
          else{
              JOptionPane.showMessageDialog(null, "En estos momentos no puede ingresar ni modificar ning√∫n dato.");
          }
      } catch (BDExcepcion ex) {
          JOptionPane.showMessageDialog(null, "Ha ocurrido un problema, consulte a Desarrollo");
      }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void radioTipoTodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioTipoTodoItemStateChanged
       this.LimpiarTabla();
    }//GEN-LAST:event_radioTipoTodoItemStateChanged

    private void radioPorcentajeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioPorcentajeItemStateChanged
        this.LimpiarTabla();
    }//GEN-LAST:event_radioPorcentajeItemStateChanged

    private void radioImporteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioImporteItemStateChanged
        this.LimpiarTabla();
    }//GEN-LAST:event_radioImporteItemStateChanged

    private void radioAplicaTodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioAplicaTodoItemStateChanged
        this.LimpiarTabla();
    }//GEN-LAST:event_radioAplicaTodoItemStateChanged

    private void radioSueldoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioSueldoItemStateChanged
       this.LimpiarTabla();
    }//GEN-LAST:event_radioSueldoItemStateChanged

    private void radioAguinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioAguinItemStateChanged
        this.LimpiarTabla();
    }//GEN-LAST:event_radioAguinItemStateChanged

    private void radioEstadoTodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioEstadoTodoItemStateChanged
        this.LimpiarTabla();
    }//GEN-LAST:event_radioEstadoTodoItemStateChanged

    private void radioActivaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioActivaItemStateChanged
        this.LimpiarTabla();
    }//GEN-LAST:event_radioActivaItemStateChanged

    private void radioInactivaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioInactivaItemStateChanged
        this.LimpiarTabla();
    }//GEN-LAST:event_radioInactivaItemStateChanged

    private void comboListarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboListarItemStateChanged
         this.LimpiarTabla();
    }//GEN-LAST:event_comboListarItemStateChanged

    private void comboListarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboListarMouseClicked
         this.LimpiarTabla();
    }//GEN-LAST:event_comboListarMouseClicked

    private void comboNuevoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboNuevoMouseClicked
       this.lblMsj.setText("");
    }//GEN-LAST:event_comboNuevoMouseClicked

    private void txtImporteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImporteKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImporteKeyTyped

    private void txtPorcenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcenKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcenKeyTyped

    private Boolean esNum(String num){
        Boolean es=true;
        Integer i=0;
        if(num.equals("")){
            es=false;
        }
        while(i<num.length() && es){
            if(!Character.isDigit(num.charAt(i))){
                es=false;
            }
            i++;
        }
        return es;
    }
     private Boolean esNumDouble(String num){
        Boolean es=true;
        Integer i=0;
        if(num.equals("")){
            es=false;
        }
        while(i<num.length() && es){
            if(!Character.isDigit(num.charAt(i))){
                if(num.charAt(i)=='.'){
                    es=true;
                }
                else{
                    es=false;
                }
            }
            i++;
        }
        return es;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonIcon btnListar;
    private org.edisoncor.gui.button.ButtonIcon btnListar1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JCheckBox checkAgui;
    private javax.swing.JCheckBox checkSueldo;
    private javax.swing.JComboBox comboListar;
    private javax.swing.JComboBox comboNuevo;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsj;
    private javax.swing.JRadioButton radioActiva;
    private javax.swing.JRadioButton radioAguin;
    private javax.swing.JRadioButton radioAplicaTodo;
    private javax.swing.JRadioButton radioEstadoTodo;
    private javax.swing.JRadioButton radioImporte;
    private javax.swing.JRadioButton radioImporteNuevo;
    private javax.swing.JRadioButton radioInactiva;
    private javax.swing.JRadioButton radioPorcentaje;
    private javax.swing.JRadioButton radioPorcentajeNuevo;
    private javax.swing.JRadioButton radioSueldo;
    private javax.swing.JRadioButton radioTipoTodo;
    private javax.swing.JTable tabla;
    private org.edisoncor.gui.textField.TextFieldRound txtImporte;
    private org.edisoncor.gui.textField.TextFieldRound txtNombre;
    private org.edisoncor.gui.textField.TextFieldRound txtNumFunc;
    private org.edisoncor.gui.textField.TextFieldRound txtNumFuncNuevo;
    private org.edisoncor.gui.textField.TextFieldRound txtPorcen;
    private org.edisoncor.gui.textField.TextFieldRound txtValor;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla(int activa, Funcionario f, Codigo cod, int aplica, int tipo) throws BDExcepcion{
        this.Alinear_Grillas();
        ArrayList<Retencion> retenciones = this.logs.listarRetenciones(activa, f, cod);
         DefaultTableModel modelo = (DefaultTableModel)tabla.getModel();
         Object[] filas=new Object[modelo.getColumnCount()];
         int cuenta=0; 
         int posicion=0;
         for(Retencion i:retenciones){
             
             if(aplica==0 && tipo==0){
                    if(retMod!=null){
                       if(retMod.getCod().getCod().equals(i.getCod().getCod()) && retMod.getFunc().getCodFunc().equals(i.getFunc().getCodFunc())){
                           posicion=cuenta;
                       }
                    }
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=this.decimales(i.getImporte());
                    filas[5]=i.getPorcentaje();
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    if(i.getActiva()==0){
                    filas[9]=false;
                    }
                    else{
                    filas[9]=true;  
                    }
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
             }
             else if(aplica==1 && tipo==0){
                 if(i.getSueldo()==1 && i.getOtros()==0){
                     if(retMod!=null){
                       if(retMod.getCod().getCod().equals(i.getCod().getCod()) && retMod.getFunc().getCodFunc().equals(i.getFunc().getCodFunc())){
                           posicion=cuenta;
                       }
                    }
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=this.decimales(i.getImporte());
                    filas[5]=i.getPorcentaje();
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
                }
             else if(aplica==2 && tipo==0){
                 if(i.getSueldo()==0 && i.getOtros()==1){
                     if(retMod!=null){
                       if(retMod.getCod().getCod().equals(i.getCod().getCod()) && retMod.getFunc().getCodFunc().equals(i.getFunc().getCodFunc())){
                           posicion=cuenta;
                       }
                    }
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=this.decimales(i.getImporte());
                    filas[5]=i.getPorcentaje();
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
                }
             
             else if(aplica==0 && tipo==1){
                 if(i.getTipo()==1){
                     if(retMod!=null){
                       if(retMod.getCod().getCod().equals(i.getCod().getCod()) && retMod.getFunc().getCodFunc().equals(i.getFunc().getCodFunc())){
                           posicion=cuenta;
                       }
                    }
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=0;
                    filas[5]=i.getPorcentaje();
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
             }
             else if(aplica==0 && tipo==2){
                 if(i.getTipo()==0){
                     if(retMod!=null){
                       if(retMod.getCod().getCod().equals(i.getCod().getCod()) && retMod.getFunc().getCodFunc().equals(i.getFunc().getCodFunc())){
                           posicion=cuenta;
                       }
                    }
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=this.decimales(i.getImporte());
                    filas[5]=0;
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
             }
             else if(aplica==1 && tipo==1){
                 if(i.getSueldo()==1 && i.getOtros()==0 && i.getTipo()==1){
                     if(retMod!=null){
                       if(retMod.getCod().getCod().equals(i.getCod().getCod()) && retMod.getFunc().getCodFunc().equals(i.getFunc().getCodFunc())){
                           posicion=cuenta;
                       }
                    }
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=0;
                    filas[5]=i.getPorcentaje();
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
             }
            else if(aplica==1 && tipo==2){
                 if(i.getSueldo()==1 && i.getOtros()==0 && i.getTipo()==0){
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=this.decimales(i.getImporte());
                    filas[5]=0;
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
             }
             else if(aplica==2 && tipo==1){
                 if(i.getSueldo()==0 && i.getOtros()==1 && i.getTipo()==1){
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=0;
                    filas[5]=i.getPorcentaje();
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
                }
             else if(aplica==2 && tipo==2){
                 if(i.getSueldo()==0 && i.getOtros()==1 && i.getTipo()==0){
                    filas[0]=i.getFunc().getCodFunc();
                    filas[1]=i.getFunc().getNomCompletoApe();
                    filas[2]=i.getCod().getCod();
                    filas[3]=i.getCod().getDescripcion();
                    filas[4]=this.decimales(i.getImporte());
                    filas[5]=0;
                    filas[6]=i.getTipo();
                    filas[7]=i.getSueldo();
                    filas[8]=i.getOtros();
                    filas[9]=i.getActiva();
                    cuenta++;
                    modelo.addRow(filas);
                    this.sumaImpo+=i.getImporte();
                    this.sumaPorcen+=i.getPorcentaje();
                 }
                }
             
             }
                    
               
        
        JTableHeader th; 
        th = tabla.getTableHeader(); 
        Font fuente = new Font("Ebrima", Font.BOLD, 12); 
        th.setBackground(Color.LIGHT_GRAY);
        th.setFont(fuente);  
        tabla.setColumnSelectionAllowed(false);
        tabla.setRowSelectionAllowed(true);
        tabla.changeSelection(posicion, 0, false, false);
        this.txtImporte.setText(this.decimales(sumaImpo));
        this.txtPorcen.setText(this.decimales(sumaPorcen));
    }
    
     private String decimales(Double sueldo) {
    DecimalFormatSymbols simbolo= new DecimalFormatSymbols();
    simbolo.setDecimalSeparator('.');
    simbolo.setGroupingSeparator(',');
                
    DecimalFormat df=new DecimalFormat("#,###,##0.00",simbolo);
    return df.format(sueldo);
    }
    
    private void Alinear_Grillas(){
        DefaultTableCellRenderer modelo = new DefaultTableCellRenderer();
        modelo.setHorizontalAlignment(SwingConstants.RIGHT);
        this.tabla.getColumnModel().getColumn(0).setCellRenderer(modelo); 
        this.tabla.getColumnModel().getColumn(2).setCellRenderer(modelo); 
        this.tabla.getColumnModel().getColumn(4).setCellRenderer(modelo);    
        this.tabla.getColumnModel().getColumn(5).setCellRenderer(modelo); 
    }
}
